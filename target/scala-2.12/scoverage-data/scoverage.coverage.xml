<statements>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>137</id><start>2428</start><end>2428</end><line>61</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>891</id><start>659</start><end>659</end><line>16</line><description>linalg.this.DenseVector.canDotD</description><symbolName>breeze.linalg.DenseVector.canDotD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:+=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>864</id><start>1289</start><end>1314</end><line>37</line><description>other.outerWeightGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.outerWeightGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>146</id><start>2444</start><end>2444</end><line>61</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>550</id><start>4225</start><end>4227</end><line>124</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>559</id><start>4229</start><end>4229</end><line>124</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>218</id><start>1178</start><end>1187</end><line>37</line><description>nxx.+(nyy)</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>568</id><start>4256</start><end>4256</end><line>125</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>227</id><start>1606</start><end>1607</end><line>46</line><description>0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>updateWeights</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>765</id><start>2063</start><end>2063</end><line>51</line><description>linalg.this.DenseVector.canAddIntoD</description><symbolName>breeze.linalg.DenseVector.canAddIntoD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>774</id><start>2295</start><end>2295</end><line>59</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>92</id><start>1734</start><end>1734</end><line>44</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>433</id><start>3840</start><end>3840</end><line>113</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:/=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>846</id><start>855</start><end>855</end><line>25</line><description>linalg.this.DenseVector.dv_s_UpdateOp_Double_OpDiv</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_UpdateOp_Double_OpDiv</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>101</id><start>1765</start><end>1828</end><line>46</line><description>WeightGradient.apply(innerWeightGrad, innerBiasGrad, outerWeightGrad)</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>442</id><start>3863</start><end>3877</end><line>114</line><description>input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, 1)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>855</id><start>1074</start><end>1074</end><line>32</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>200</id><start>464</start><end>481</end><line>16</line><description>breeze.linalg.sum.apply[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double](l.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](l)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))./[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpDiv.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpDiv, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftUFunc[breeze.linalg.sum.type, breeze.linalg.DenseVector[Double], Double, Double](linalg.this.sum.reduce_Double[breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.canIterateValues[Double]), support.this.CanTranspose.transposeOfScalarIsScalar[Double]))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>173</id><start>3009</start><end>3009</end><line>78</line><description>linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>514</id><start>4143</start><end>4143</end><line>123</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>209</id><start>882</start><end>888</end><line>29</line><description>x2.-(1)</description><symbolName>scala.Double.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>523</id><start>4158</start><end>4158</end><line>123</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>cost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>182</id><start>329</start><end>345</end><line>10</line><description>SimpleLaplacianModel.this.laplacian(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleLaplacianModel.laplacian</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>254</id><start>1718</start><end>1718</end><line>51</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>191</id><start>477</start><end>477</end><line>16</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpDiv</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpDiv</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>720</id><start>1260</start><end>1260</end><line>30</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>729</id><start>1397</start><end>1399</end><line>33</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>828</id><start>318</start><end>424</end><line>9</line><description>WeightGradient.apply(linalg.this.`package`.InjectNumericOps[Double](scalar).*[Double, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](WeightGradient.this.innerWeightGradient)(linalg.this.DenseMatrix.s_dm_op_Double_OpMulMatrix), linalg.this.`package`.InjectNumericOps[Double](scalar).*[Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](WeightGradient.this.innerBiasGradient)(linalg.this.DenseVector.s_dv_Op_Double_OpMulMatrix), linalg.this.`package`.InjectNumericOps[Double](scalar).*[Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](WeightGradient.this.outerWeightGradient)(linalg.this.DenseVector.s_dv_Op_Double_OpMulMatrix))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>424</id><start>3546</start><end>3578</end><line>105</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.y)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.inputDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>738</id><start>1417</start><end>1485</end><line>36</line><description>WeightGradientBatch.apply(innerWeightGrad, innerBiasGrad, outerWeightGrad)</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>83</id><start>1517</start><end>1601</end><line>40</line><description>SimpleDerivative.this.modifiedOuterWeight.*:*[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](SimpleNetwork.getDerivative(SimpleDerivative.this.multiIndex.total.+(1), preOutput))(linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar)</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>/</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>837</id><start>679</start><end>679</end><line>20</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpDiv</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpDiv</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>810</id><start>2772</start><end>2772</end><line>70</line><description>linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseMatrix.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>155</id><start>2438</start><end>2438</end><line>61</line><description>linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_DM_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>496</id><start>4094</start><end>4094</end><line>122</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>469</id><start>4041</start><end>4041</end><line>121</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>819</id><start>342</start><end>361</end><line>9</line><description>WeightGradient.this.innerWeightGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.innerWeightGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>164</id><start>2975</start><end>2975</end><line>77</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpPow</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpPow</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>478</id><start>4038</start><end>4038</end><line>121</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>505</id><start>4061</start><end>4061</end><line>121</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>577</id><start>4272</start><end>4272</end><line>125</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>245</id><start>1691</start><end>1693</end><line>50</line><description>1.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>783</id><start>2384</start><end>2384</end><line>61</line><description>SigmoidDerivatives.this.sigmoidThirdDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>792</id><start>2451</start><end>2523</end><line>63</line><description>throw new scala.`package`.IllegalArgumentException(&quot;Higher derivatives not implemented&quot;)</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Throw</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>110</id><start>2087</start><end>2087</end><line>54</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>451</id><start>3928</start><end>3928</end><line>117</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>801</id><start>2683</start><end>2683</end><line>68</line><description>SigmoidDerivatives.this.sigmoidFirstDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>119</id><start>2240</start><end>2241</end><line>57</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>460</id><start>3957</start><end>3957</end><line>118</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>873</id><start>440</start><end>440</end><line>11</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>532</id><start>4112</start><end>4169</end><line>123</line><description>x1minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nx)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>128</id><start>2243</start><end>2243</end><line>57</line><description>linalg.this.BroadcastedColumns.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet))</description><symbolName>breeze.linalg.BroadcastedColumns.broadcastOp2</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>882</id><start>582</start><end>582</end><line>15</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>541</id><start>4217</start><end>4217</end><line>124</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>406</id><start>2998</start><end>3024</end><line>90</line><description>dnxx.weightGradient(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.weightGradient</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>747</id><start>1722</start><end>1722</end><line>43</line><description>linalg.this.DenseMatrix.handholdCanMapRows[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapRows</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>756</id><start>1719</start><end>1741</end><line>43</line><description>mat.apply[collection.immutable.::.type, breeze.linalg.*.type, breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](scala.`package`.::, breeze.linalg.*)(linalg.this.Broadcaster.canBroadcastColumns[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double])).+[breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], Nothing, breeze.linalg.DenseMatrix[Double]](SimpleNetwork.this.innerBias)(linalg.this.BroadcastedColumns.broadcastOp2[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double], linalg.this.DenseVector.canAddD, linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)))</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>415</id><start>3248</start><end>3263</end><line>95</line><description>x1x1Minus1.*(x2)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>487</id><start>4045</start><end>4045</end><line>121</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>236</id><start>1637</start><end>1637</end><line>47</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>23</id><start>897</start><end>898</end><line>30</line><description>1</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>678</id><start>515</start><end>515</end><line>12</line><description>`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutput</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>741</id><start>1587</start><end>1587</end><line>39</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>777</id><start>2340</start><end>2340</end><line>60</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>95</id><start>1712</start><end>1712</end><line>44</line><description>linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)</description><symbolName>breeze.linalg.operators.DenseVector_GenericOps.liftDMOpToDVTransposeOp</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>436</id><start>3835</start><end>3849</end><line>113</line><description>input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, 0)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>104</id><start>2080</start><end>2082</end><line>54</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>445</id><start>3901</start><end>3901</end><line>116</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpSub</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpSub</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>517</id><start>4140</start><end>4157</end><line>123</line><description>x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>391</id><start>2522</start><end>2528</end><line>77</line><description>x2.-(1)</description><symbolName>scala.Double.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>732</id><start>1403</start><end>1403</end><line>33</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>472</id><start>4039</start><end>4044</end><line>121</line><description>x1.*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](breeze.numerics.constants.`package`.Pi)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>131</id><start>2199</start><end>2266</end><line>57</line><description>innerBiasGradMat.:=[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](innerBiasGradMat.apply[collection.immutable.::.type, breeze.linalg.*.type, breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](scala.`package`.::, breeze.linalg.*)(linalg.this.Broadcaster.canBroadcastColumns[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double])).*:*[breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.modifiedOuterWeight)(linalg.this.BroadcastedColumns.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet))))(linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpSet)</description><symbolName>breeze.linalg.NumericOps.:=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>427</id><start>3691</start><end>3712</end><line>109</line><description>dnx.applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>463</id><start>3994</start><end>3994</end><line>119</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>122</id><start>2247</start><end>2266</end><line>57</line><description>SimpleDerivative.this.modifiedOuterWeight</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.modifiedOuterWeight</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>194</id><start>477</start><end>477</end><line>16</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpDiv.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpDiv, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>508</id><start>4061</start><end>4061</end><line>121</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>176</id><start>2997</start><end>2997</end><line>78</line><description>linalg.this.DenseVector.canIterateValues[Double]</description><symbolName>breeze.linalg.DenseVector.canIterateValues</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>750</id><start>1730</start><end>1730</end><line>43</line><description>linalg.this.DenseMatrix.handholdCanMapRows[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapRows</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>409</id><start>3119</start><end>3142</end><line>93</line><description>x1x1Minus1.+(x2x2Minus1)</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>723</id><start>1260</start><end>1260</end><line>30</line><description>linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)</description><symbolName>breeze.linalg.DenseMatrix.canMapRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>418</id><start>3290</start><end>3313</end><line>96</line><description>x1x1Minus1.*(x2x2Minus1)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>updateWeights</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>759</id><start>1956</start><end>1956</end><line>49</line><description>linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_dm_UpdateOp_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>77</id><start>1384</start><end>1440</end><line>37</line><description>SimpleNetwork.getDerivative(SimpleDerivative.this.multiIndex.total, preOutput)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.getDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:*=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>831</id><start>529</start><end>529</end><line>14</line><description>linalg.this.DenseVector.dv_s_UpdateOp_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_UpdateOp_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>804</id><start>2728</start><end>2728</end><line>69</line><description>SigmoidDerivatives.this.sigmoidSecondDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>86</id><start>1692</start><end>1692</end><line>44</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>490</id><start>4081</start><end>4081</end><line>122</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>185</id><start>471</start><end>471</end><line>16</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>158</id><start>2520</start><end>2594</end><line>64</line><description>WeightGradientBatch.apply(innerWeightMats, innerBiasGradMat, outerWeightGradMat)</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>499</id><start>4094</start><end>4094</end><line>122</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>167</id><start>2975</start><end>2975</end><line>77</line><description>linalg.this.DenseMatrix.canMapCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)</description><symbolName>breeze.linalg.DenseMatrix.canMapCols</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>50</id><start>580</start><end>621</end><line>15</line><description>breeze.linalg.DenseMatrix.zeros[Double](SimpleDerivative.this.W.rows, SimpleDerivative.this.W.cols)((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero)</description><symbolName>breeze.linalg.DenseMatrix.zeros</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>705</id><start>1104</start><end>1104</end><line>27</line><description>`package`.this.sigmoid.sigmoidImplDouble</description><symbolName>breeze.numerics.sigmoid.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>364</id><start>2026</start><end>2026</end><line>58</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>373</id><start>1989</start><end>2032</end><line>58</line><description>x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nxx.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nyy)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>59</id><start>812</start><end>812</end><line>23</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>400</id><start>2842</start><end>2851</end><line>85</line><description>nxx.+(nyy)</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>714</id><start>1253</start><end>1255</end><line>30</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>32</id><start>1170</start><end>1178</end><line>39</line><description>11.*(ex).*(ex)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>813</id><start>2817</start><end>2817</end><line>71</line><description>linalg.this.DenseMatrix.scalarOf[Double]</description><symbolName>breeze.linalg.DenseMatrix.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>786</id><start>2362</start><end>2391</end><line>61</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](input)(SigmoidDerivatives.this.sigmoidThirdDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidThirdDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>382</id><start>2248</start><end>2281</end><line>66</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.xx)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.inputDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>68</id><start>958</start><end>1051</end><line>29</line><description>SimpleDerivative.this.modifiedOuterWeight.dot[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Double](SimpleNetwork.getDerivative(SimpleDerivative.this.multiIndex.total, SimpleDerivative.this.simpleNetwork.hiddenPreOutput(input)))(linalg.this.DenseVector.canDotD)</description><symbolName>breeze.linalg.ImmutableNumericOps.dot</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>41</id><start>325</start><end>344</end><line>8</line><description>SimpleDerivative.this.multiIndex.asVector</description><symbolName>org.alexguldemond.pdenetwork.MultiIndex.asVector</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>822</id><start>376</start><end>393</end><line>10</line><description>WeightGradient.this.innerBiasGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.innerBiasGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>795</id><start>2639</start><end>2639</end><line>67</line><description>linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseMatrix.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>140</id><start>2423</start><end>2436</end><line>61</line><description>input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>481</id><start>4031</start><end>4031</end><line>121</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>113</id><start>2087</start><end>2087</end><line>54</line><description>linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)</description><symbolName>breeze.linalg.DenseMatrix.canMapRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>454</id><start>3928</start><end>3928</end><line>117</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>149</id><start>2463</start><end>2484</end><line>61</line><description>SimpleDerivative.this.multiIndex.asVector.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>346</id><start>1969</start><end>1969</end><line>57</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>660</id><start>5105</start><end>5125</end><line>145</line><description>SimpleLaplacianModel.this.simpleNetwork.apply(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>687</id><start>702</start><end>702</end><line>17</line><description>`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>696</id><start>837</start><end>837</end><line>19</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>355</id><start>1923</start><end>1980</end><line>57</line><description>x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](ny)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>669</id><start>366</start><end>397</end><line>9</line><description>breeze.numerics.`package`.sigmoid.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](SimpleNetwork.this.hiddenPreOutput(input))(`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>768</id><start>2251</start><end>2251</end><line>58</line><description>`package`.this.sigmoid.sigmoidImplDouble</description><symbolName>breeze.numerics.sigmoid.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>735</id><start>1388</start><end>1388</end><line>33</line><description>linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)</description><symbolName>breeze.linalg.operators.DenseVector_GenericOps.liftDMOpToDVTransposeOp</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>367</id><start>2026</start><end>2026</end><line>58</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>53</id><start>748</start><end>757</end><line>19</line><description>powers.apply(i)</description><symbolName>breeze.linalg.DenseVector.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>394</id><start>2646</start><end>2651</end><line>81</line><description>breeze.numerics.constants.`package`.Pi.*(x1)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>708</id><start>1097</start><end>1115</end><line>27</line><description>breeze.numerics.`package`.sigmoid.apply[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](preOutput)(`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>403</id><start>2867</start><end>2902</end><line>87</line><description>SimpleLaplacianModel.this.simpleNetwork.weightGradient(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.weightGradient</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>62</id><start>820</start><end>820</end><line>23</line><description>linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_UpdateOp_Double_OpSet</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>134</id><start>2413</start><end>2415</end><line>61</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>prod</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>941</id><start>1637</start><end>1637</end><line>41</line><description>linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_S_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>600</id><start>4574</start><end>4615</end><line>133</line><description>nw.elemProd(x1x1Minus1.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.elemProd</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>950</id><start>1803</start><end>1803</end><line>44</line><description>linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_s_UpdateOp_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>609</id><start>4688</start><end>4705</end><line>134</line><description>x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>681</id><start>506</start><end>506</end><line>12</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DVTt_DMT_eq_DMT[Double](linalg.this.DenseMatrix.implOpMulMatrix_DMD_DMD_eq_DMD)</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DVTt_DMT_eq_DMT</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>376</id><start>1981</start><end>1981</end><line>57</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>35</id><start>1196</start><end>1202</end><line>39</line><description>1.+(ex)</description><symbolName>scala.Int.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>690</id><start>777</start><end>777</end><line>18</line><description>SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>349</id><start>1969</start><end>1969</end><line>57</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</source><package>org.alexguldemond.pdenetwork</package><class>MultiIndex</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.MultiIndex</fullClassName><method>asVector</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</path><id>8</id><start>244</start><end>288</end><line>13</line><description>breeze.linalg.DenseVector.apply[Double](MultiIndex.this.values.map[Double, Seq[Double]](((x$3: Int) =&gt; x$3.toDouble))(collection.this.Seq.canBuildFrom[Double]).toArray[Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.linalg.DenseVector.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>44</id><start>423</start><end>423</end><line>10</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>699</id><start>829</start><end>829</end><line>19</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DVD_DMD_eq_DMD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>updateWeights</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>762</id><start>2009</start><end>2009</end><line>50</line><description>linalg.this.DenseVector.canAddIntoD</description><symbolName>breeze.linalg.DenseVector.canAddIntoD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>358</id><start>1915</start><end>1915</end><line>56</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>17</id><start>638</start><end>645</end><line>21</line><description>2.*(sigma)</description><symbolName>scala.Int.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>771</id><start>2244</start><end>2258</end><line>58</line><description>breeze.numerics.`package`.sigmoid.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](input)(`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>430</id><start>3799</start><end>3821</end><line>112</line><description>dnyy.applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>26</id><start>897</start><end>924</end><line>30</line><description>1.-(6.*(sigma)).+(6.*(sigma).*(sigma))</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>125</id><start>2243</start><end>2243</end><line>57</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>977</id><start>2367</start><end>2391</end><line>63</line><description>other.innerBiasGradients</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.innerBiasGradients</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>331</id><start>1849</start><end>1849</end><line>55</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>645</id><start>4881</start><end>4881</end><line>136</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>672</id><start>504</start><end>504</end><line>12</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>304</id><start>1868</start><end>1868</end><line>56</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>340</id><start>1951</start><end>1968</end><line>57</line><description>x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>654</id><start>5041</start><end>5049</end><line>144</line><description>input.apply(1)</description><symbolName>breeze.linalg.DenseVector.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>421</id><start>3320</start><end>3348</end><line>98</line><description>weightGradient.:*=(laplacian)</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.:*=</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>80</id><start>1569</start><end>1589</end><line>40</line><description>SimpleDerivative.this.multiIndex.total.+(1)</description><symbolName>scala.Int.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>89</id><start>1683</start><end>1683</end><line>44</line><description>linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)</description><symbolName>breeze.linalg.operators.DenseVector_GenericOps.liftDMOpToDVTransposeOp</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>968</id><start>2162</start><end>2162</end><line>55</line><description>linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_DM_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>286</id><start>1826</start><end>1826</end><line>55</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>627</id><start>4798</start><end>4798</end><line>135</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>636</id><start>4808</start><end>4810</end><line>135</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>295</id><start>1843</start><end>1843</end><line>55</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>717</id><start>1252</start><end>1252</end><line>30</line><description>linalg.this.Broadcaster.canBroadcastColumns[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastColumns</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>923</id><start>1211</start><end>1211</end><line>30</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>448</id><start>3901</start><end>3901</end><line>116</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpSub.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpSub, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>932</id><start>1316</start><end>1316</end><line>32</line><description>true</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>457</id><start>3957</start><end>3957</end><line>118</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>116</id><start>2162</start><end>2182</end><line>56</line><description>SimpleDerivative.this.multiIndex.total.+(1)</description><symbolName>scala.Int.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>update</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>663</id><start>5189</start><end>5191</end><line>148</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>744</id><start>1694</start><end>1714</end><line>42</line><description>SimpleNetwork.this.innerWeights.*[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](input)(linalg.this.DenseMatrix.implOpMulMatrix_DMD_DMD_eq_DMD)</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>98</id><start>1697</start><end>1759</end><line>44</line><description>v.*:*[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](sigma)(linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar).*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.multiIndex.asVector.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)).*:*[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.innerWeightGradMod)(linalg.this.DenseMatrix.op_DM_DM_Double_OpMulScalar)</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>412</id><start>3164</start><end>3203</end><line>94</line><description>x1minus1.*(x2x2Minus1).+(x1.*(x2x2Minus1))</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>439</id><start>3868</start><end>3868</end><line>114</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>753</id><start>1730</start><end>1730</end><line>43</line><description>linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_UpdateOp_Double_OpSet</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>71</id><start>1215</start><end>1242</end><line>32</line><description>SimpleDerivative.this.simpleNetwork.hiddenPreOutputBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.hiddenPreOutputBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>107</id><start>2079</start><end>2079</end><line>54</line><description>linalg.this.Broadcaster.canBroadcastColumns[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastColumns</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>959</id><start>2022</start><end>2022</end><line>51</line><description>true</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>618</id><start>4707</start><end>4707</end><line>134</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>313</id><start>1883</start><end>1883</end><line>56</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>385</id><start>2369</start><end>2379</end><line>70</line><description>dny.apply(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>322</id><start>1903</start><end>1903</end><line>56</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>726</id><start>1343</start><end>1353</end><line>32</line><description>input.cols</description><symbolName>breeze.linalg.DenseMatrix.cols</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>11</id><start>374</start><end>383</end><line>12</line><description>1.-(sigma)</description><symbolName>scala.Int.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>908</id><start>1129</start><end>1130</end><line>29</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>567</id><start>4256</start><end>4256</end><line>125</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>639</id><start>4806</start><end>4806</end><line>135</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>307</id><start>1868</start><end>1868</end><line>56</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>648</id><start>4881</start><end>4881</end><line>136</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>74</id><start>1167</start><end>1167</end><line>32</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DVTt_DMT_eq_DMT[Double](linalg.this.DenseMatrix.implOpMulMatrix_DMD_DMD_eq_DMD)</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DVTt_DMT_eq_DMT</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>388</id><start>2445</start><end>2453</end><line>73</line><description>input.apply(0)</description><symbolName>breeze.linalg.DenseVector.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>56</id><start>781</start><end>794</end><line>21</line><description>powers.apply(i).-(1)</description><symbolName>scala.Double.-</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>397</id><start>2661</start><end>2690</end><line>82</line><description>2.*(x1x1Minus1.+(x2x2Minus1)).*(n)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>935</id><start>1292</start><end>1292</end><line>32</line><description>collection.this.Seq.canBuildFrom[breeze.linalg.DenseMatrix[Double]]</description><symbolName>scala.collection.Seq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>prod</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>944</id><start>1610</start><end>1646</end><line>41</line><description>WeightGradientBatch.this.innerWeightGradients.map[breeze.linalg.DenseMatrix[Double], Seq[breeze.linalg.DenseMatrix[Double]]](((x$3: breeze.linalg.DenseMatrix[Double]) =&gt; x$3.*[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix)))(collection.this.Seq.canBuildFrom[breeze.linalg.DenseMatrix[Double]])</description><symbolName>scala.collection.TraversableLike.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>603</id><start>4671</start><end>4671</end><line>134</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>262</id><start>1786</start><end>1786</end><line>54</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>702</id><start>844</start><end>907</end><line>21</line><description>WeightGradient.apply(innerWeightGrad, innerBiasGrad, outerWeightGrad)</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>298</id><start>1843</start><end>1843</end><line>55</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>370</id><start>2017</start><end>2017</end><line>58</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>711</id><start>1183</start><end>1183</end><line>29</line><description>linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseMatrix.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>343</id><start>1949</start><end>1949</end><line>57</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>29</id><start>1136</start><end>1142</end><line>38</line><description>breeze.numerics.`package`.exp.apply[Double, Double](x)(`package`.this.exp.expDoubleImpl)</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>684</id><start>702</start><end>702</end><line>17</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>379</id><start>2117</start><end>2137</end><line>62</line><description>SimpleLaplacianModel.this.simpleNetwork.apply(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>38</id><start>1192</start><end>1206</end><line>39</line><description>breeze.numerics.`package`.pow.apply[Double, Int, Double](1.+(ex), 5)(`package`.this.pow.powDoubleIntImpl)</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>693</id><start>755</start><end>788</end><line>18</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](preOutput)(SigmoidDerivatives.this.sigmoidFirstDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>352</id><start>1974</start><end>1974</end><line>57</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>47</id><start>606</start><end>612</end><line>15</line><description>SimpleDerivative.this.W.rows</description><symbolName>breeze.linalg.DenseMatrix.rows</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>576</id><start>4272</start><end>4272</end><line>125</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>926</id><start>1211</start><end>1211</end><line>30</line><description>linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_UpdateOp_Double_OpSet</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>585</id><start>4357</start><end>4387</end><line>128</line><description>dnx.weightGradientBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.weightGradientBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>899</id><start>776</start><end>804</end><line>19</line><description>WeightGradientBatch.this.innerWeightGradients.apply(0).cols</description><symbolName>breeze.linalg.DenseMatrix.cols</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>244</id><start>1659</start><end>1666</end><line>49</line><description>x1.-[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](1.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpSub.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpSub, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.-</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>558</id><start>4229</start><end>4229</end><line>124</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>594</id><start>4611</start><end>4611</end><line>133</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>253</id><start>1718</start><end>1718</end><line>51</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>226</id><start>1602</start><end>1604</end><line>46</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>980</id><start>2421</start><end>2447</end><line>64</line><description>other.outerWeightGradients</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.outerWeightGradients</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>325</id><start>1908</start><end>1908</end><line>56</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>666</id><start>373</start><end>373</end><line>9</line><description>`package`.this.sigmoid.sigmoidImplDouble</description><symbolName>breeze.numerics.sigmoid.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>361</id><start>2001</start><end>2001</end><line>58</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>334</id><start>1936</start><end>1936</end><line>57</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>20</id><start>866</start><end>866</end><line>29</line><description>`package`.this.sigmoid.sigmoidImplDouble</description><symbolName>breeze.numerics.sigmoid.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>675</id><start>515</start><end>515</end><line>12</line><description>linalg.this.DenseMatrix.scalarOf[Double]</description><symbolName>breeze.linalg.DenseMatrix.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Model.scala</source><package>org.alexguldemond.pdenetwork</package><class>Model</class><classType>Trait</classType><fullClassName>org.alexguldemond.pdenetwork.Model</fullClassName><method>averageCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Model.scala</path><id>2</id><start>259</start><end>299</end><line>11</line><description>Model.this.batchCost(input)./(input.cols.toDouble)</description><symbolName>scala.Double./</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>872</id><start>441</start><end>443</end><line>11</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>881</id><start>582</start><end>582</end><line>15</line><description>linalg.this.DenseVector.canDotD</description><symbolName>breeze.linalg.DenseVector.canDotD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>540</id><start>4191</start><end>4191</end><line>124</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>953</id><start>1838</start><end>1838</end><line>45</line><description>linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_s_UpdateOp_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>890</id><start>659</start><end>659</end><line>16</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>235</id><start>1637</start><end>1637</end><line>47</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>549</id><start>4204</start><end>4204</end><line>124</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>962</id><start>1998</start><end>1998</end><line>51</line><description>collection.this.Seq.canBuildFrom[breeze.linalg.DenseMatrix[Double]]</description><symbolName>scala.collection.Seq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>621</id><start>4647</start><end>4712</end><line>134</line><description>nxw.elemProd(x1minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.elemProd</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>971</id><start>2288</start><end>2314</end><line>59</line><description>other.innerWeightGradients</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.innerWeightGradients</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>316</id><start>1883</start><end>1883</end><line>56</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>657</id><start>5057</start><end>5069</end><line>145</line><description>breeze.numerics.`package`.sin.apply[Double, Double](breeze.numerics.constants.`package`.Pi.*(x1))(`package`.this.sin.sinDoubleImpl)</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>289</id><start>1840</start><end>1842</end><line>55</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>630</id><start>4798</start><end>4798</end><line>135</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:+=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>863</id><start>1215</start><end>1260</end><line>36</line><description>WeightGradient.this.innerBiasGradient.:+=[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](other.innerBiasGradient)(linalg.this.DenseVector.canAddIntoD)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>65</id><start>1028</start><end>1050</end><line>29</line><description>SimpleDerivative.this.simpleNetwork.hiddenPreOutput(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.hiddenPreOutput</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>917</id><start>1135</start><end>1135</end><line>29</line><description>linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet))</description><symbolName>breeze.linalg.BroadcastedRows.broadcastOp2</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>271</id><start>1783</start><end>1783</end><line>54</line><description>`package`.this.sin.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sin.sinDoubleImpl, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>612</id><start>4686</start><end>4686</end><line>134</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>280</id><start>1790</start><end>1790</end><line>54</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>319</id><start>1903</start><end>1903</end><line>56</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</source><package>org.alexguldemond.pdenetwork</package><class>MultiIndex</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.MultiIndex</fullClassName><method>asVector</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</path><id>5</id><start>268</start><end>278</end><line>13</line><description>x$3.toDouble</description><symbolName>scala.Int.toDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>857</id><start>933</start><end>1102</end><line>30</line><description>WeightGradient.apply(WeightGradient.this.innerWeightGradient.+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](other.innerWeightGradient)(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd), WeightGradient.this.innerBiasGradient.+[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Nothing, breeze.linalg.DenseVector[Double]](other.innerBiasGradient)(linalg.this.DenseVector.canAddD), WeightGradient.this.outerWeightGradient.+[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Nothing, breeze.linalg.DenseVector[Double]](other.outerWeightGradient)(linalg.this.DenseVector.canAddD))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:*=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>830</id><start>476</start><end>506</end><line>13</line><description>WeightGradient.this.innerWeightGradient.:*=[breeze.linalg.DenseMatrix[Double], Double](scalar)(linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpMulScalar)</description><symbolName>breeze.linalg.NumericOps.:*=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>516</id><start>4143</start><end>4143</end><line>123</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:+=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>866</id><start>1265</start><end>1314</end><line>37</line><description>WeightGradient.this.outerWeightGradient.:+=[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](other.outerWeightGradient)(linalg.this.DenseVector.canAddIntoD)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>552</id><start>4224</start><end>4224</end><line>124</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>184</id><start>439</start><end>460</end><line>15</line><description>SimpleLaplacianModel.this.laplacianBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleLaplacianModel.laplacianBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>525</id><start>4158</start><end>4158</end><line>123</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>938</id><start>1532</start><end>1532</end><line>38</line><description>linalg.this.Transpose.canUntranspose[breeze.linalg.DenseVector[Double]]</description><symbolName>breeze.linalg.Transpose.canUntranspose</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>534</id><start>4104</start><end>4104</end><line>122</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>597</id><start>4611</start><end>4611</end><line>133</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>193</id><start>477</start><end>477</end><line>16</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>prod</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>947</id><start>1698</start><end>1698</end><line>41</line><description>linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_S_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>606</id><start>4691</start><end>4691</end><line>134</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>265</id><start>1786</start><end>1786</end><line>54</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>301</id><start>1806</start><end>1806</end><line>54</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>615</id><start>4707</start><end>4707</end><line>134</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>812</id><start>2750</start><end>2779</end><line>70</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.apply[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](input)(SigmoidDerivatives.this.sigmoidThirdDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidThirdDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>848</id><start>970</start><end>995</end><line>30</line><description>other.innerWeightGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.innerWeightGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>821</id><start>333</start><end>361</end><line>9</line><description>linalg.this.`package`.InjectNumericOps[Double](scalar).*[Double, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](WeightGradient.this.innerWeightGradient)(linalg.this.DenseMatrix.s_dm_op_Double_OpMulMatrix)</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>480</id><start>4035</start><end>4045</end><line>121</line><description>breeze.numerics.`package`.sin.apply[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](breeze.numerics.constants.`package`.Pi)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftUFunc[breeze.numerics.sin.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](`package`.this.sin.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sin.sinDoubleImpl, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))), linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>893</id><start>659</start><end>659</end><line>16</line><description>linalg.this.DenseMatrix.canCollapseCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero)</description><symbolName>breeze.linalg.operators.LowPriorityDenseMatrix1.canCollapseCols</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>175</id><start>2997</start><end>2997</end><line>78</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>256</id><start>1715</start><end>1730</end><line>51</line><description>x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>974</id><start>2326</start><end>2326</end><line>60</line><description>linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_dm_UpdateOp_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>803</id><start>2728</start><end>2728</end><line>69</line><description>linalg.this.DenseMatrix.scalarOf[Double]</description><symbolName>breeze.linalg.DenseMatrix.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>337</id><start>1962</start><end>1962</end><line>57</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>211</id><start>943</start><end>954</end><line>31</line><description>x2.*(x2minus1)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>965</id><start>2107</start><end>2107</end><line>54</line><description>linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_DM_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>283</id><start>1790</start><end>1790</end><line>54</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>624</id><start>4772</start><end>4772</end><line>135</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>633</id><start>4785</start><end>4785</end><line>135</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>292</id><start>1839</start><end>1839</end><line>55</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>/</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>839</id><start>707</start><end>707</end><line>20</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpDiv</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpDiv</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>498</id><start>4094</start><end>4094</end><line>122</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>166</id><start>2975</start><end>2975</end><line>77</line><description>linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_UpdateOp_Double_OpSet</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>507</id><start>4061</start><end>4061</end><line>121</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>920</id><start>1207</start><end>1209</end><line>30</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>579</id><start>4236</start><end>4236</end><line>124</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>929</id><start>1186</start><end>1218</end><line>30</line><description>WeightGradientBatch.this.innerBiasGradients.apply[breeze.linalg.*.type, collection.immutable.::.type, breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](breeze.linalg.*, scala.`package`.::)(linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])).*:*[breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](vec)(linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>274</id><start>1783</start><end>1783</end><line>54</line><description>linalg.this.Transpose.liftUFunc[breeze.numerics.sin.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](`package`.this.sin.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sin.sinDoubleImpl, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))), linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftUFunc</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>588</id><start>4495</start><end>4526</end><line>131</line><description>dnyy.weightGradientBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.weightGradientBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>247</id><start>1689</start><end>1689</end><line>50</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpSub</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpSub</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>328</id><start>1849</start><end>1849</end><line>55</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>14</id><start>598</start><end>608</end><line>20</line><description>breeze.numerics.`package`.sigmoid.apply[Double, Double](x)(`package`.this.sigmoid.sigmoidImplDouble)</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>489</id><start>4045</start><end>4045</end><line>121</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>902</id><start>914</start><end>914</end><line>22</line><description>linalg.this.DenseMatrix.s_dm_op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseMatrixOps.s_dm_op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>875</id><start>354</start><end>447</end><line>11</line><description>WeightGradient.apply(WeightGradientBatch.this.innerWeightGradients.apply(i), WeightGradientBatch.this.innerBiasGradients.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]), WeightGradientBatch.this.outerWeightGradients.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>220</id><start>960</start><end>1188</end><line>36</line><description>SimpleLaplacianModel.minusPiSquared.*(x2).*(breeze.numerics.`package`.sin.apply[Double, Double](breeze.numerics.constants.`package`.Pi.*(x1))(`package`.this.sin.sinDoubleImpl)).+(2.*(x1x1Minus1.+(x2x2Minus1)).*(n)).+(2.*(x1minus1.*(x2x2Minus1).+(x1.*(x2x2Minus1))).*(nx)).+(2.*(x1x1Minus1.*(x2minus1).+(x1x1Minus1.*(x2))).*(ny)).+(x1x1Minus1.*(x2x2Minus1).*(nxx.+(nyy)))</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>561</id><start>4170</start><end>4170</end><line>123</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>911</id><start>1128</start><end>1128</end><line>29</line><description>linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>884</id><start>582</start><end>582</end><line>15</line><description>linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpMulInner.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.canDotD, linalg.this.DenseMatrix.canCollapseCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero))</description><symbolName>breeze.linalg.BroadcastedRows.broadcastOp2</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>229</id><start>1609</start><end>1609</end><line>46</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>543</id><start>4217</start><end>4217</end><line>124</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>570</id><start>4281</start><end>4281</end><line>125</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>202</id><start>589</start><end>628</end><line>21</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.x).apply(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>642</id><start>4760</start><end>4810</end><line>135</line><description>x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>956</id><start>1853</start><end>1884</end><line>46</line><description>WeightGradientBatch.this.outerWeightGradients.:*=[breeze.linalg.DenseMatrix[Double], Double](scalar)(linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpMulScalar)</description><symbolName>breeze.linalg.NumericOps.:*=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>238</id><start>1664</start><end>1666</end><line>49</line><description>1.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>310</id><start>1888</start><end>1888</end><line>56</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>651</id><start>4818</start><end>4898</end><line>136</line><description>weightGradient.inPlaceSum(nxxw.sum(nyyw).elemProd(x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.inPlaceSum</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>277</id><start>1776</start><end>1776</end><line>54</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>815</id><start>2817</start><end>2817</end><line>71</line><description>linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseMatrix.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>474</id><start>4038</start><end>4038</end><line>121</line><description>`package`.this.sin.sinDoubleImpl</description><symbolName>breeze.numerics.sin.sinDoubleImpl</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>824</id><start>367</start><end>393</end><line>10</line><description>linalg.this.`package`.InjectNumericOps[Double](scalar).*[Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](WeightGradient.this.innerBiasGradient)(linalg.this.DenseVector.s_dv_Op_Double_OpMulMatrix)</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>483</id><start>4031</start><end>4031</end><line>121</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>142</id><start>2420</start><end>2420</end><line>61</line><description>linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)</description><symbolName>breeze.linalg.operators.DenseVector_GenericOps.liftDMOpToDVTransposeOp</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>896</id><start>767</start><end>768</end><line>19</line><description>0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>151</id><start>2461</start><end>2461</end><line>61</line><description>linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)</description><symbolName>breeze.linalg.operators.DenseVector_GenericOps.liftDMOpToDVTransposeOp</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>492</id><start>4081</start><end>4081</end><line>122</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>905</id><start>887</start><end>920</end><line>22</line><description>innerWeightSum.:+=[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](breeze.linalg.`package`.InjectNumericOps[Double](scalar).*[Double, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](mat)(linalg.this.DenseMatrix.s_dm_op_Double_OpMulMatrix))(linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>250</id><start>1689</start><end>1689</end><line>50</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpSub.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpSub, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>223</id><start>1400</start><end>1450</end><line>43</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.y).applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>564</id><start>4170</start><end>4170</end><line>123</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>259</id><start>1755</start><end>1755</end><line>52</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>232</id><start>1630</start><end>1632</end><line>47</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>573</id><start>4277</start><end>4286</end><line>125</line><description>nxx.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nyy)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>770</id><start>2251</start><end>2251</end><line>58</line><description>`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>779</id><start>2340</start><end>2340</end><line>60</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>124</id><start>2243</start><end>2243</end><line>57</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>438</id><start>3873</start><end>3874</end><line>114</line><description>1</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>878</id><start>575</start><end>575</end><line>15</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>537</id><start>4191</start><end>4191</end><line>124</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>851</id><start>1023</start><end>1046</end><line>31</line><description>other.innerBiasGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.innerBiasGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>133</id><start>2372</start><end>2382</end><line>60</line><description>input.cols</description><symbolName>breeze.linalg.DenseMatrix.cols</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>447</id><start>3901</start><end>3901</end><line>116</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>106</id><start>2079</start><end>2079</end><line>54</line><description>linalg.this.DenseMatrix.handholdCanMapRows[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapRows</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>887</id><start>655</start><end>657</end><line>16</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:+=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>860</id><start>1161</start><end>1210</end><line>35</line><description>WeightGradient.this.innerWeightGradient.:+=[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](other.innerWeightGradient)(linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>546</id><start>4204</start><end>4204</end><line>124</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>205</id><start>751</start><end>791</end><line>24</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.yy).apply(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>519</id><start>4138</start><end>4138</end><line>123</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>869</id><start>413</start><end>415</end><line>11</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>214</id><start>978</start><end>988</end><line>33</line><description>breeze.numerics.`package`.sin.apply[Double, Double](breeze.numerics.constants.`package`.Pi.*(x1))(`package`.this.sin.sinDoubleImpl)</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>555</id><start>4224</start><end>4224</end><line>124</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>528</id><start>4163</start><end>4163</end><line>123</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>752</id><start>1730</start><end>1730</end><line>43</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>updateWeights</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>761</id><start>2013</start><end>2045</end><line>50</line><description>weightGradient.innerBiasGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.innerBiasGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>420</id><start>3108</start><end>3314</end><line>95</line><description>nw.*(2.0).*(x1x1Minus1.+(x2x2Minus1)).+(nxw.*(2.0).*(x1minus1.*(x2x2Minus1).+(x1.*(x2x2Minus1)))).+(nyw.*(2.0).*(x1x1Minus1.*(x2minus1).+(x1x1Minus1.*(x2)))).+(nxxw.+(nyyw).*(x1x1Minus1.*(x2x2Minus1)))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:*=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>833</id><start>564</start><end>564</end><line>15</line><description>linalg.this.DenseVector.dv_s_UpdateOp_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_UpdateOp_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>429</id><start>3762</start><end>3784</end><line>111</line><description>dnxx.applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>743</id><start>1707</start><end>1707</end><line>42</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DMD_DMD_eq_DMD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DMD_DMD_eq_DMD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:/=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>842</id><start>787</start><end>787</end><line>23</line><description>linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpDiv</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_s_UpdateOp_Double_OpDiv</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>501</id><start>4098</start><end>4098</end><line>122</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>160</id><start>2971</start><end>2973</end><line>77</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>169</id><start>2962</start><end>2985</end><line>77</line><description>matrix.apply[breeze.linalg.*.type, collection.immutable.::.type, breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](breeze.linalg.*, scala.`package`.::)(linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])).^:^[breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](powers)(linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpPow.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpPow, linalg.this.DenseMatrix.canMapCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)))</description><symbolName>breeze.linalg.ImmutableNumericOps.^:^</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>510</id><start>4123</start><end>4123</end><line>123</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>178</id><start>2997</start><end>2997</end><line>78</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>582</id><start>4236</start><end>4236</end><line>124</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>591</id><start>4598</start><end>4598</end><line>133</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>797</id><start>2632</start><end>2646</end><line>67</line><description>breeze.numerics.`package`.sigmoid.apply[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](input)(`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>456</id><start>3925</start><end>3932</end><line>117</line><description>x2.-[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](1.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpSub.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpSub, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.-</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>806</id><start>2728</start><end>2728</end><line>69</line><description>SigmoidDerivatives.this.sigmoidSecondDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidSecondDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>465</id><start>3994</start><end>3994</end><line>119</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>788</id><start>2429</start><end>2429</end><line>62</line><description>SigmoidDerivatives.this.sigmoidFourthDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>115</id><start>2074</start><end>2105</end><line>54</line><description>sigma.apply[collection.immutable.::.type, breeze.linalg.*.type, breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](scala.`package`.::, breeze.linalg.*)(linalg.this.Broadcaster.canBroadcastColumns[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double])).*:*[breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.weightModifier)(linalg.this.BroadcastedColumns.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>187</id><start>471</start><end>471</end><line>16</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>914</id><start>1135</start><end>1135</end><line>29</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>196</id><start>467</start><end>467</end><line>16</line><description>linalg.this.DenseVector.canIterateValues[Double]</description><symbolName>breeze.linalg.DenseVector.canIterateValues</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>268</id><start>1783</start><end>1783</end><line>54</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>241</id><start>1662</start><end>1662</end><line>49</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>369</id><start>2017</start><end>2017</end><line>58</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>782</id><start>2384</start><end>2384</end><line>61</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>441</id><start>3876</start><end>3876</end><line>114</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>181</id><start>2990</start><end>3016</end><line>78</line><description>breeze.linalg.product.apply[breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double]](powerMatrix.apply[breeze.linalg.*.type, collection.immutable.::.type, breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](breeze.linalg.*, scala.`package`.::)(linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])))(linalg.this.BroadcastedRows.broadcastOp[breeze.linalg.product.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.product.reduce_Double[breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.canIterateValues[Double]), linalg.this.DenseMatrix.canCollapseCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero)))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>809</id><start>2772</start><end>2772</end><line>70</line><description>SigmoidDerivatives.this.sigmoidThirdDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>163</id><start>2975</start><end>2975</end><line>77</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>477</id><start>4038</start><end>4038</end><line>121</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>172</id><start>3009</start><end>3009</end><line>78</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>513</id><start>4143</start><end>4143</end><line>123</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>387</id><start>2420</start><end>2431</end><line>72</line><description>dnyy.apply(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>W</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>46</id><start>488</start><end>514</end><line>12</line><description>SimpleDerivative.this.simpleNetwork.innerWeights</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.innerWeights</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>800</id><start>2683</start><end>2683</end><line>68</line><description>linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseMatrix.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>118</id><start>2236</start><end>2238</end><line>57</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>459</id><start>3957</start><end>3957</end><line>118</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>432</id><start>3845</start><end>3846</end><line>113</line><description>0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>127</id><start>2243</start><end>2243</end><line>57</line><description>linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)</description><symbolName>breeze.linalg.DenseMatrix.canMapRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>468</id><start>4041</start><end>4041</end><line>121</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>854</id><start>1076</start><end>1101</end><line>32</line><description>other.outerWeightGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.outerWeightGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>199</id><start>467</start><end>467</end><line>16</line><description>linalg.this.Transpose.liftUFunc[breeze.linalg.sum.type, breeze.linalg.DenseVector[Double], Double, Double](linalg.this.sum.reduce_Double[breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.canIterateValues[Double]), support.this.CanTranspose.transposeOfScalarIsScalar[Double])</description><symbolName>breeze.linalg.TransposeLowPrio.liftUFunc</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>136</id><start>2429</start><end>2431</end><line>61</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>208</id><start>856</start><end>862</end><line>28</line><description>x1.-(1)</description><symbolName>scala.Double.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>217</id><start>1092</start><end>1140</end><line>36</line><description>2.*(x1x1Minus1.*(x2minus1).+(x1x1Minus1.*(x2))).*(ny)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>683</id><start>645</start><end>667</end><line>15</line><description>SimpleNetwork.this.hiddenPreOutput(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.hiddenPreOutput</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>100</id><start>1669</start><end>1759</end><line>44</line><description>innerBiasGrad.*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](input.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)).+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](v.*:*[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](sigma)(linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar).*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.multiIndex.asVector.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)).*:*[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.innerWeightGradMod)(linalg.this.DenseMatrix.op_DM_DM_Double_OpMulScalar))(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>414</id><start>3219</start><end>3220</end><line>95</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>728</id><start>1380</start><end>1380</end><line>33</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>755</id><start>1730</start><end>1730</end><line>43</line><description>linalg.this.BroadcastedColumns.broadcastOp2[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double], linalg.this.DenseVector.canAddD, linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet))</description><symbolName>breeze.linalg.BroadcastedColumns.broadcastOp2</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>109</id><start>2087</start><end>2087</end><line>54</line><description>linalg.this.DenseMatrix.handholdCanMapRows[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapRows</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>450</id><start>3930</start><end>3932</end><line>117</line><description>1.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>updateWeights</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>764</id><start>2067</start><end>2101</end><line>51</line><description>weightGradient.outerWeightGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.outerWeightGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>82</id><start>1537</start><end>1537</end><line>40</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>423</id><start>3499</start><end>3531</end><line>104</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.x)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.inputDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>/</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>836</id><start>630</start><end>656</end><line>19</line><description>WeightGradient.this.innerWeightGradient./[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpDiv)</description><symbolName>breeze.linalg.ImmutableNumericOps./</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>495</id><start>4094</start><end>4094</end><line>122</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>522</id><start>4159</start><end>4161</end><line>123</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>91</id><start>1734</start><end>1734</end><line>44</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>531</id><start>4163</start><end>4163</end><line>123</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:/=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>845</id><start>802</start><end>830</end><line>24</line><description>WeightGradient.this.innerBiasGradient.:/=[breeze.linalg.DenseVector[Double], Double](scalar)(linalg.this.DenseVector.dv_s_UpdateOp_Double_OpDiv)</description><symbolName>breeze.linalg.NumericOps.:/=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>190</id><start>477</start><end>477</end><line>16</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>504</id><start>4069</start><end>4103</end><line>122</line><description>x1x1Minus1.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](n)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>396</id><start>2642</start><end>2652</end><line>81</line><description>breeze.numerics.`package`.sin.apply[Double, Double](breeze.numerics.constants.`package`.Pi.*(x1))(`package`.this.sin.sinDoubleImpl)</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>737</id><start>1330</start><end>1411</end><line>32</line><description>scala.collection.Seq.tabulate[breeze.linalg.DenseMatrix[Double]](input.cols)(((i: Int) =&gt; innerBiasGrad.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD))))</description><symbolName>scala.collection.generic.GenTraversableFactory.tabulate</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>55</id><start>781</start><end>794</end><line>21</line><description>powers.apply(i).-(1)</description><symbolName>scala.Double.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>710</id><start>1183</start><end>1183</end><line>29</line><description>SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>64</id><start>626</start><end>881</end><line>16</line><description>scala.Predef.intWrapper(0).to(SimpleDerivative.this.W.cols.-(1)).withFilter(((check$ifrefutable$1: Int) =&gt; (check$ifrefutable$1: Int @unchecked) match {
  case (i @ (_: Int)) =&gt; true
  case _ =&gt; false
})).foreach[breeze.linalg.DenseVector[Double]](((i: Int) =&gt; {
  val powers: breeze.linalg.DenseVector[Double] = SimpleDerivative.this.multiIndex.asVector;
  powers.update(i, if (powers.apply(i).==(0.0))
    powers.apply(i)
  else
    powers.apply(i).-(1));
  mat.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).:=[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](SimpleDerivative.matrixVectorPowerProduct(SimpleDerivative.this.W, powers))(linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)
}))</description><symbolName>scala.collection.generic.FilterMonadic.foreach</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>405</id><start>2957</start><end>2982</end><line>89</line><description>dny.weightGradient(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.weightGradient</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>719</id><start>1260</start><end>1260</end><line>30</line><description>linalg.this.DenseMatrix.handholdCanMapRows[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapRows</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>746</id><start>1727</start><end>1728</end><line>43</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>378</id><start>1773</start><end>2032</end><line>57</line><description>x2.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](breeze.numerics.`package`.sin.apply[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](breeze.numerics.constants.`package`.Pi)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftUFunc[breeze.numerics.sin.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](`package`.this.sin.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sin.sinDoubleImpl, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))), linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](SimpleLaplacianModel.minusPiSquared)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](n)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nx)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](ny)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nxx.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nyy)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>818</id><start>2839</start><end>2911</end><line>72</line><description>throw new scala.`package`.IllegalArgumentException(&quot;Higher derivatives not implemented&quot;)</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Throw</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>791</id><start>2406</start><end>2436</end><line>62</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](input)(SigmoidDerivatives.this.sigmoidFourthDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidFourthDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>73</id><start>1167</start><end>1167</end><line>32</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DMD_DMD_eq_DMD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DMD_DMD_eq_DMD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>827</id><start>395</start><end>423</end><line>10</line><description>linalg.this.`package`.InjectNumericOps[Double](scalar).*[Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](WeightGradient.this.outerWeightGradient)(linalg.this.DenseVector.s_dv_Op_Double_OpMulMatrix)</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>486</id><start>4045</start><end>4045</end><line>121</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>145</id><start>2448</start><end>2459</end><line>61</line><description>sigma.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double])</description><symbolName>breeze.linalg.TensorLike.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>154</id><start>2440</start><end>2508</end><line>61</line><description>v.*:*[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](sigma.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]))(linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar).*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.multiIndex.asVector.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)).*:*[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.innerWeightGradMod)(linalg.this.DenseMatrix.op_DM_DM_Double_OpMulScalar)</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>692</id><start>777</start><end>777</end><line>18</line><description>SigmoidDerivatives.this.sigmoidFirstDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>360</id><start>2001</start><end>2001</end><line>58</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>701</id><start>815</start><end>838</end><line>19</line><description>innerBiasGrad.*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](input.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD))</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>773</id><start>2295</start><end>2295</end><line>59</line><description>SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>426</id><start>3643</start><end>3676</end><line>107</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.yy)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.inputDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>85</id><start>1692</start><end>1692</end><line>44</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>399</id><start>2756</start><end>2804</end><line>84</line><description>2.*(x1x1Minus1.*(x2minus1).+(x1x1Minus1.*(x2))).*(ny)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutput</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>740</id><start>1589</start><end>1598</end><line>39</line><description>SimpleNetwork.this.innerBias</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.innerBias</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>58</id><start>813</start><end>815</end><line>23</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>94</id><start>1712</start><end>1712</end><line>44</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DVD_DMD_eq_DMD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>67</id><start>978</start><end>978</end><line>29</line><description>linalg.this.DenseVector.canDotD</description><symbolName>breeze.linalg.DenseVector.canDotD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>408</id><start>3114</start><end>3115</end><line>93</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>139</id><start>2435</start><end>2435</end><line>61</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>prod</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>946</id><start>1648</start><end>1675</end><line>41</line><description>WeightGradientBatch.this.innerBiasGradients.*[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix)</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>955</id><start>1874</start><end>1874</end><line>46</line><description>linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_s_UpdateOp_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>300</id><start>1806</start><end>1806</end><line>54</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>623</id><start>4772</start><end>4772</end><line>135</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>686</id><start>702</start><end>702</end><line>17</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>381</id><start>2200</start><end>2232</end><line>65</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.y)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.inputDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>722</id><start>1260</start><end>1260</end><line>30</line><description>linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_UpdateOp_Double_OpSet</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>354</id><start>1974</start><end>1974</end><line>57</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>40</id><start>322</start><end>323</end><line>8</line><description>SimpleDerivative.this.W</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.W</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>695</id><start>738</start><end>788</end><line>18</line><description>SimpleNetwork.this.outerWeights.*:*[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](preOutput)(SigmoidDerivatives.this.sigmoidFirstDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))))(linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar)</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>390</id><start>2496</start><end>2502</end><line>76</line><description>x1.-(1)</description><symbolName>scala.Double.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>704</id><start>1104</start><end>1104</end><line>27</line><description>linalg.this.DenseMatrix.scalarOf[Double]</description><symbolName>breeze.linalg.DenseMatrix.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>49</id><start>605</start><end>605</end><line>15</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>130</id><start>2216</start><end>2216</end><line>57</line><description>linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpSet</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_dm_UpdateOp_Double_OpSet</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>471</id><start>4041</start><end>4041</end><line>121</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>937</id><start>1378</start><end>1438</end><line>35</line><description>WeightGradientBatch.apply(innerWeights, innerBiases, outerWeights)</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>982</id><start>2396</start><end>2447</end><line>64</line><description>WeightGradientBatch.this.outerWeightGradients.:+=[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](other.outerWeightGradients)(linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>336</id><start>1962</start><end>1962</end><line>57</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>677</id><start>515</start><end>515</end><line>12</line><description>linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseMatrix.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>345</id><start>1970</start><end>1972</end><line>57</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</source><package>org.alexguldemond.pdenetwork</package><class>MultiIndex</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.MultiIndex</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</path><id>4</id><start>212</start><end>225</end><line>11</line><description>MultiIndex.this.values.apply(index)</description><symbolName>scala.collection.SeqLike.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>13</id><start>605</start><end>605</end><line>20</line><description>`package`.this.sigmoid.sigmoidImplDouble</description><symbolName>breeze.numerics.sigmoid.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>767</id><start>2251</start><end>2251</end><line>58</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>973</id><start>2284</start><end>2284</end><line>59</line><description>true</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>632</id><start>4785</start><end>4785</end><line>135</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>641</id><start>4806</start><end>4806</end><line>135</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>713</id><start>1161</start><end>1194</end><line>29</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.apply[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](preOutput)(SigmoidDerivatives.this.sigmoidFirstDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>372</id><start>2017</start><end>2017</end><line>58</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>794</id><start>2639</start><end>2639</end><line>67</line><description>`package`.this.sigmoid.sigmoidImplDouble</description><symbolName>breeze.numerics.sigmoid.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>453</id><start>3928</start><end>3928</end><line>117</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>148</id><start>2483</start><end>2483</end><line>61</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>121</id><start>2235</start><end>2235</end><line>57</line><description>linalg.this.Broadcaster.canBroadcastColumns[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastColumns</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>462</id><start>3994</start><end>3994</end><line>119</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>157</id><start>2359</start><end>2514</end><line>60</line><description>scala.collection.Seq.tabulate[breeze.linalg.DenseMatrix[Double]](input.cols)(((i: Int) =&gt; innerBiasGradMat.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)).+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](v.*:*[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](sigma.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]))(linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar).*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.multiIndex.asVector.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)).*:*[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.innerWeightGradMod)(linalg.this.DenseMatrix.op_DM_DM_Double_OpMulScalar))(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd)))</description><symbolName>scala.collection.generic.GenTraversableFactory.tabulate</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>668</id><start>373</start><end>373</end><line>9</line><description>`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>363</id><start>2001</start><end>2001</end><line>58</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>22</id><start>885</start><end>894</end><line>30</line><description>1.-(sigma)</description><symbolName>scala.Int.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>776</id><start>2273</start><end>2302</end><line>59</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](input)(SigmoidDerivatives.this.sigmoidFirstDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>435</id><start>3848</start><end>3848</end><line>113</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>31</id><start>1163</start><end>1168</end><line>39</line><description>11.*(ex)</description><symbolName>scala.Int.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>749</id><start>1732</start><end>1741</end><line>43</line><description>SimpleNetwork.this.innerBias</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.innerBias</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>785</id><start>2384</start><end>2384</end><line>61</line><description>SigmoidDerivatives.this.sigmoidThirdDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidThirdDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>103</id><start>1987</start><end>2043</end><line>52</line><description>SimpleNetwork.getDerivative(SimpleDerivative.this.multiIndex.total, preOutput)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.getDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>444</id><start>3901</start><end>3901</end><line>116</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>updateWeights</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>758</id><start>1960</start><end>1994</end><line>49</line><description>weightGradient.innerWeightGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.innerWeightGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>76</id><start>1344</start><end>1366</end><line>35</line><description>SimpleDerivative.this.simpleNetwork.hiddenPreOutput(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.hiddenPreOutput</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>417</id><start>3213</start><end>3264</end><line>95</line><description>nyw.*(2.0).*(x1x1Minus1.*(x2minus1).+(x1x1Minus1.*(x2)))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>112</id><start>2087</start><end>2087</end><line>54</line><description>linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_UpdateOp_Double_OpSet</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>964</id><start>2109</start><end>2133</end><line>54</line><description>other.innerBiasGradients</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.innerBiasGradients</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>309</id><start>1888</start><end>1888</end><line>56</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>650</id><start>4846</start><end>4896</end><line>136</line><description>nxxw.sum(nyyw).elemProd(x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.elemProd</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>659</id><start>5095</start><end>5101</end><line>145</line><description>1.-(x2)</description><symbolName>scala.Int.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>318</id><start>1903</start><end>1903</end><line>56</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>327</id><start>1857</start><end>1914</end><line>56</line><description>x1minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nx)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>731</id><start>1403</start><end>1403</end><line>33</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>698</id><start>831</start><end>838</end><line>19</line><description>input.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>357</id><start>1915</start><end>1915</end><line>56</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>16</id><start>636</start><end>637</end><line>21</line><description>1</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>97</id><start>1737</start><end>1737</end><line>44</line><description>linalg.this.DenseMatrix.op_DM_DM_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_DM_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>563</id><start>4170</start><end>4170</end><line>123</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>653</id><start>5019</start><end>5027</end><line>143</line><description>input.apply(0)</description><symbolName>breeze.linalg.DenseVector.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>312</id><start>1885</start><end>1902</end><line>56</line><description>x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>348</id><start>1969</start><end>1969</end><line>57</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</source><package>org.alexguldemond.pdenetwork</package><class>MultiIndex</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.MultiIndex</fullClassName><method>asVector</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</path><id>7</id><start>256</start><end>287</end><line>13</line><description>MultiIndex.this.values.map[Double, Seq[Double]](((x$3: Int) =&gt; x$3.toDouble))(collection.this.Seq.canBuildFrom[Double]).toArray[Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>scala.collection.TraversableOnce.toArray</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>79</id><start>1468</start><end>1492</end><line>39</line><description>SimpleDerivative.this.weightModifier.*:*[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](sigma)(linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar)</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>393</id><start>2583</start><end>2594</end><line>79</line><description>x2.*(x2minus1)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>734</id><start>1388</start><end>1388</end><line>33</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DVD_DMD_eq_DMD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>88</id><start>1683</start><end>1683</end><line>44</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DVD_DMD_eq_DMD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>402</id><start>2624</start><end>2852</end><line>84</line><description>SimpleLaplacianModel.minusPiSquared.*(x2).*(breeze.numerics.`package`.sin.apply[Double, Double](breeze.numerics.constants.`package`.Pi.*(x1))(`package`.this.sin.sinDoubleImpl)).+(2.*(x1x1Minus1.+(x2x2Minus1)).*(n)).+(2.*(x1minus1.*(x2x2Minus1).+(x1.*(x2x2Minus1))).*(nx)).+(2.*(x1x1Minus1.*(x2minus1).+(x1x1Minus1.*(x2))).*(ny)).+(x1x1Minus1.*(x2x2Minus1).*(nxx.+(nyy)))</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>940</id><start>1519</start><end>1534</end><line>38</line><description>WeightGradientBatch.this.elemProd(vec.t[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double]](linalg.this.Transpose.canUntranspose[breeze.linalg.DenseVector[Double]]))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.elemProd</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>626</id><start>4772</start><end>4772</end><line>135</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>976</id><start>2247</start><end>2332</end><line>59</line><description>WeightGradientBatch.this.innerWeightGradients.zip[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Seq[(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])]](other.innerWeightGradients)(collection.this.Seq.canBuildFrom[(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])]).withFilter(((check$ifrefutable$4: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])) =&gt; (check$ifrefutable$4: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]) @unchecked) match {
  case (_1: breeze.linalg.DenseMatrix[Double], _2: breeze.linalg.DenseMatrix[Double])(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])((w @ _), (ow @ _)) =&gt; true
  case _ =&gt; false
})).foreach[breeze.linalg.DenseMatrix[Double]](((x$6: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])) =&gt; (x$6: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]) @unchecked) match {
  case (_1: breeze.linalg.DenseMatrix[Double], _2: breeze.linalg.DenseMatrix[Double])(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])((w @ _), (ow @ _)) =&gt; w.:+=[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](ow)(linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd)
}))</description><symbolName>scala.collection.generic.FilterMonadic.foreach</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>prod</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>949</id><start>1590</start><end>1707</end><line>41</line><description>WeightGradientBatch.apply(WeightGradientBatch.this.innerWeightGradients.map[breeze.linalg.DenseMatrix[Double], Seq[breeze.linalg.DenseMatrix[Double]]](((x$3: breeze.linalg.DenseMatrix[Double]) =&gt; x$3.*[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix)))(collection.this.Seq.canBuildFrom[breeze.linalg.DenseMatrix[Double]]), WeightGradientBatch.this.innerBiasGradients.*[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix), WeightGradientBatch.this.outerWeightGradients.*[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>294</id><start>1839</start><end>1839</end><line>55</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>608</id><start>4691</start><end>4691</end><line>134</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>635</id><start>4785</start><end>4785</end><line>135</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>644</id><start>4719</start><end>4813</end><line>135</line><description>weightGradient.inPlaceSum(nyw.elemProd(x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.inPlaceSum</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>707</id><start>1104</start><end>1104</end><line>27</line><description>`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>303</id><start>1806</start><end>1806</end><line>54</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>716</id><start>1252</start><end>1252</end><line>30</line><description>linalg.this.DenseMatrix.handholdCanMapRows[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapRows</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>375</id><start>1981</start><end>1981</end><line>57</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>384</id><start>2345</start><end>2355</end><line>69</line><description>dnx.apply(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>70</id><start>1165</start><end>1165</end><line>32</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>411</id><start>3188</start><end>3203</end><line>94</line><description>x1.*(x2x2Minus1)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>725</id><start>1240</start><end>1276</end><line>30</line><description>sigmoidFirst.apply[collection.immutable.::.type, breeze.linalg.*.type, breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](scala.`package`.::, breeze.linalg.*)(linalg.this.Broadcaster.canBroadcastColumns[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double])).*:*[breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](SimpleNetwork.this.outerWeights)(linalg.this.BroadcastedColumns.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>43</id><start>427</start><end>441</end><line>10</line><description>SimpleDerivative.this.weightModifier</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.weightModifier</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>52</id><start>721</start><end>736</end><line>18</line><description>powers.apply(i).==(0.0)</description><symbolName>scala.Double.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>922</id><start>1204</start><end>1204</end><line>30</line><description>linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>931</id><start>1316</start><end>1316</end><line>32</line><description>collection.this.Seq.canBuildFrom[(breeze.linalg.DenseMatrix[Double], Double)]</description><symbolName>scala.collection.Seq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>276</id><start>1776</start><end>1776</end><line>54</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>904</id><start>902</start><end>902</end><line>22</line><description>linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_dm_UpdateOp_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>249</id><start>1689</start><end>1689</end><line>50</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>590</id><start>4598</start><end>4598</end><line>133</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>285</id><start>1826</start><end>1826</end><line>55</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>258</id><start>1755</start><end>1755</end><line>52</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>599</id><start>4586</start><end>4614</end><line>133</line><description>x1x1Minus1.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>671</id><start>349</start><end>397</end><line>9</line><description>SimpleNetwork.this.outerWeights.dot[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Double](breeze.numerics.`package`.sigmoid.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](SimpleNetwork.this.hiddenPreOutput(input))(`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))))(linalg.this.DenseVector.canDotD)</description><symbolName>breeze.linalg.ImmutableNumericOps.dot</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>330</id><start>1849</start><end>1849</end><line>55</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>267</id><start>1784</start><end>1789</end><line>54</line><description>x1.*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](breeze.numerics.constants.`package`.Pi)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>366</id><start>2026</start><end>2026</end><line>58</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>339</id><start>1962</start><end>1962</end><line>57</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>25</id><start>911</start><end>924</end><line>30</line><description>6.*(sigma).*(sigma)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>680</id><start>506</start><end>506</end><line>12</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DMD_DMD_eq_DMD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DMD_DMD_eq_DMD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>34</id><start>1158</start><end>1189</end><line>39</line><description>-1.+(11.*(ex)).-(11.*(ex).*(ex)).+(ex.*(ex).*(ex))</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>913</id><start>1135</start><end>1135</end><line>29</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>886</id><start>653</start><end>654</end><line>16</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>572</id><start>4281</start><end>4281</end><line>125</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>895</id><start>634</start><end>666</end><line>16</line><description>WeightGradientBatch.this.innerBiasGradients.apply[breeze.linalg.*.type, collection.immutable.::.type, breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](breeze.linalg.*, scala.`package`.::)(linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])).dot[breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](vec)(linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpMulInner.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.canDotD, linalg.this.DenseMatrix.canCollapseCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero)))</description><symbolName>breeze.linalg.ImmutableNumericOps.dot</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>240</id><start>1662</start><end>1662</end><line>49</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpSub</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpSub</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>581</id><start>4236</start><end>4236</end><line>124</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>967</id><start>2164</start><end>2190</end><line>55</line><description>other.outerWeightGradients</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.outerWeightGradients</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>662</id><start>5054</start><end>5125</end><line>145</line><description>x2.*(breeze.numerics.`package`.sin.apply[Double, Double](breeze.numerics.constants.`package`.Pi.*(x1))(`package`.this.sin.sinDoubleImpl)).+(x1.*(1.0.-(x1)).*(x2).*(1.-(x2)).*(SimpleLaplacianModel.this.simpleNetwork.apply(input)))</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>321</id><start>1903</start><end>1903</end><line>56</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>877</id><start>578</start><end>580</end><line>15</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>61</id><start>823</start><end>875</end><line>23</line><description>SimpleDerivative.matrixVectorPowerProduct(SimpleDerivative.this.W, powers)</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.matrixVectorPowerProduct</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>958</id><start>2022</start><end>2022</end><line>51</line><description>collection.this.Seq.canBuildFrom[(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])]</description><symbolName>scala.collection.Seq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>617</id><start>4707</start><end>4707</end><line>134</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>689</id><start>777</start><end>777</end><line>18</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>10</id><start>348</start><end>358</end><line>11</line><description>breeze.numerics.`package`.sigmoid.apply[Double, Double](x)(`package`.this.sigmoid.sigmoidImplDouble)</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:+=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>862</id><start>1233</start><end>1233</end><line>36</line><description>linalg.this.DenseVector.canAddIntoD</description><symbolName>breeze.linalg.DenseVector.canAddIntoD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>521</id><start>4138</start><end>4138</end><line>123</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>557</id><start>4229</start><end>4229</end><line>124</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>871</id><start>394</start><end>418</end><line>11</line><description>WeightGradientBatch.this.innerBiasGradients.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double])</description><symbolName>breeze.linalg.TensorLike.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>189</id><start>478</start><end>480</end><line>16</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>530</id><start>4163</start><end>4163</end><line>123</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>prod</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>943</id><start>1634</start><end>1634</end><line>41</line><description>collection.this.Seq.canBuildFrom[breeze.linalg.DenseMatrix[Double]]</description><symbolName>scala.collection.Seq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>225</id><start>1531</start><end>1582</end><line>45</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.yy).applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>306</id><start>1868</start><end>1868</end><line>56</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>817</id><start>2794</start><end>2824</end><line>71</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.apply[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](input)(SigmoidDerivatives.this.sigmoidFourthDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidFourthDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>853</id><start>1003</start><end>1046</end><line>31</line><description>WeightGradient.this.innerBiasGradient.+[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Nothing, breeze.linalg.DenseVector[Double]](other.innerBiasGradient)(linalg.this.DenseVector.canAddD)</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>512</id><start>4123</start><end>4123</end><line>123</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>37</id><start>1195</start><end>1195</end><line>39</line><description>`package`.this.pow.powDoubleIntImpl</description><symbolName>breeze.numerics.pow.powDoubleIntImpl</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>180</id><start>2997</start><end>2997</end><line>78</line><description>linalg.this.BroadcastedRows.broadcastOp[breeze.linalg.product.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.product.reduce_Double[breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.canIterateValues[Double]), linalg.this.DenseMatrix.canCollapseCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero))</description><symbolName>breeze.linalg.BroadcastedRows.broadcastOp</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>665</id><start>373</start><end>373</end><line>9</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>333</id><start>1936</start><end>1936</end><line>57</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>674</id><start>516</start><end>543</end><line>12</line><description>SimpleNetwork.this.hiddenPreOutputBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.hiddenPreOutputBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>342</id><start>1949</start><end>1949</end><line>57</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Model.scala</source><package>org.alexguldemond.pdenetwork</package><class>Model</class><classType>Trait</classType><fullClassName>org.alexguldemond.pdenetwork.Model</fullClassName><method>averageCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Model.scala</path><id>1</id><start>279</start><end>299</end><line>11</line><description>input.cols.toDouble</description><symbolName>scala.Int.toDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>889</id><start>652</start><end>652</end><line>16</line><description>linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>207</id><start>827</start><end>835</end><line>26</line><description>input.apply(1)</description><symbolName>breeze.linalg.DenseVector.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>548</id><start>4204</start><end>4204</end><line>124</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>961</id><start>2068</start><end>2074</end><line>52</line><description>w.+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](ow)(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>216</id><start>1035</start><end>1083</end><line>35</line><description>2.*(x1minus1.*(x2x2Minus1).+(x1.*(x2x2Minus1))).*(nx)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>970</id><start>1964</start><end>2191</end><line>51</line><description>WeightGradientBatch.apply(WeightGradientBatch.this.innerWeightGradients.zip[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Seq[(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])]](other.innerWeightGradients)(collection.this.Seq.canBuildFrom[(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])]).withFilter(((check$ifrefutable$3: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])) =&gt; (check$ifrefutable$3: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]) @unchecked) match {
  case (_1: breeze.linalg.DenseMatrix[Double], _2: breeze.linalg.DenseMatrix[Double])(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])((w @ _), (ow @ _)) =&gt; true
  case _ =&gt; false
})).map[breeze.linalg.DenseMatrix[Double], Seq[breeze.linalg.DenseMatrix[Double]]](((x$5: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])) =&gt; (x$5: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]) @unchecked) match {
  case (_1: breeze.linalg.DenseMatrix[Double], _2: breeze.linalg.DenseMatrix[Double])(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])((w @ _), (ow @ _)) =&gt; w.+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](ow)(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd)
}))(collection.this.Seq.canBuildFrom[breeze.linalg.DenseMatrix[Double]]), WeightGradientBatch.this.innerBiasGradients.+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](other.innerBiasGradients)(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd), WeightGradientBatch.this.outerWeightGradients.+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](other.outerWeightGradients)(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>288</id><start>1826</start><end>1826</end><line>55</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>629</id><start>4798</start><end>4798</end><line>135</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>979</id><start>2344</start><end>2391</end><line>63</line><description>WeightGradientBatch.this.innerBiasGradients.:+=[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](other.innerBiasGradients)(linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>324</id><start>1908</start><end>1908</end><line>56</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>297</id><start>1843</start><end>1843</end><line>55</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>638</id><start>4806</start><end>4806</end><line>135</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:/=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>844</id><start>820</start><end>820</end><line>24</line><description>linalg.this.DenseVector.dv_s_UpdateOp_Double_OpDiv</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_UpdateOp_Double_OpDiv</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>503</id><start>4098</start><end>4098</end><line>122</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>198</id><start>467</start><end>467</end><line>16</line><description>support.this.CanTranspose.transposeOfScalarIsScalar[Double]</description><symbolName>breeze.linalg.support.CanTranspose.transposeOfScalarIsScalar</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>539</id><start>4191</start><end>4191</end><line>124</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>952</id><start>1772</start><end>1814</end><line>44</line><description>WeightGradientBatch.this.innerWeightGradients.foreach[breeze.linalg.DenseMatrix[Double]](((x$4: breeze.linalg.DenseMatrix[Double]) =&gt; x$4.:*=[breeze.linalg.DenseMatrix[Double], Double](scalar)(linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpMulScalar)))</description><symbolName>scala.collection.IterableLike.foreach</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>611</id><start>4686</start><end>4686</end><line>134</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>925</id><start>1211</start><end>1211</end><line>30</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>270</id><start>1783</start><end>1783</end><line>54</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>584</id><start>4302</start><end>4342</end><line>127</line><description>SimpleLaplacianModel.this.simpleNetwork.weightGradientBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.weightGradientBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>934</id><start>1357</start><end>1365</end><line>33</line><description>w.*[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix)</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>279</id><start>1776</start><end>1776</end><line>54</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>620</id><start>4661</start><end>4711</end><line>134</line><description>x1minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>252</id><start>1718</start><end>1718</end><line>51</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>593</id><start>4612</start><end>4614</end><line>133</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>351</id><start>1974</start><end>1974</end><line>57</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>19</id><start>617</start><end>646</end><line>21</line><description>sigma.*(1.-(sigma)).*(1.-(2.*(sigma)))</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>826</id><start>402</start><end>402</end><line>10</line><description>linalg.this.DenseVector.s_dv_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.s_dv_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>28</id><start>1139</start><end>1139</end><line>38</line><description>`package`.this.exp.expDoubleImpl</description><symbolName>breeze.numerics.exp.expDoubleImpl</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>898</id><start>797</start><end>798</end><line>19</line><description>0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>/</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>835</id><start>649</start><end>649</end><line>19</line><description>linalg.this.DenseMatrix.op_DM_S_Double_OpDiv</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_S_Double_OpDiv</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>907</id><start>932</start><end>992</end><line>25</line><description>WeightGradient.apply(innerWeightSum, innerBiasSum, outerWeightSum)</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>566</id><start>4256</start><end>4256</end><line>125</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>880</id><start>582</start><end>582</end><line>15</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>602</id><start>4671</start><end>4671</end><line>134</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>916</id><start>1135</start><end>1135</end><line>29</line><description>linalg.this.DenseMatrix.canMapCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)</description><symbolName>breeze.linalg.DenseMatrix.canMapCols</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>261</id><start>1752</start><end>1767</end><line>52</line><description>x2.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>234</id><start>1629</start><end>1629</end><line>47</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>575</id><start>4272</start><end>4272</end><line>125</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>243</id><start>1662</start><end>1662</end><line>49</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpSub.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpSub, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>647</id><start>4881</start><end>4881</end><line>136</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>656</id><start>5060</start><end>5060</end><line>145</line><description>`package`.this.sin.sinDoubleImpl</description><symbolName>breeze.numerics.sin.sinDoubleImpl</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>315</id><start>1883</start><end>1883</end><line>56</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>282</id><start>1790</start><end>1790</end><line>54</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>820</id><start>340</start><end>340</end><line>9</line><description>linalg.this.DenseMatrix.s_dm_op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseMatrixOps.s_dm_op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:*=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>829</id><start>496</start><end>496</end><line>13</line><description>linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_s_UpdateOp_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>174</id><start>2998</start><end>3015</end><line>78</line><description>powerMatrix.apply[breeze.linalg.*.type, collection.immutable.::.type, breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](breeze.linalg.*, scala.`package`.::)(linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double]))</description><symbolName>breeze.linalg.TensorLike.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>147</id><start>2483</start><end>2483</end><line>61</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>488</id><start>4045</start><end>4045</end><line>121</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>928</id><start>1211</start><end>1211</end><line>30</line><description>linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet))</description><symbolName>breeze.linalg.BroadcastedRows.broadcastOp2</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>901</id><start>720</start><end>805</end><line>19</line><description>breeze.linalg.DenseMatrix.zeros[Double](WeightGradientBatch.this.innerWeightGradients.apply(0).rows, WeightGradientBatch.this.innerWeightGradients.apply(0).cols)((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero)</description><symbolName>breeze.linalg.DenseMatrix.zeros</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>cost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>183</id><start>350</start><end>356</end><line>11</line><description>l.*(l)./(2.0)</description><symbolName>scala.Double./</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>497</id><start>4094</start><end>4094</end><line>122</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>587</id><start>4448</start><end>4479</end><line>130</line><description>dnxx.weightGradientBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.weightGradientBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>156</id><start>2396</start><end>2508</end><line>61</line><description>innerBiasGradMat.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)).+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](v.*:*[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](sigma.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]))(linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar).*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.multiIndex.asVector.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)).*:*[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.innerWeightGradMod)(linalg.this.DenseMatrix.op_DM_DM_Double_OpMulScalar))(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>596</id><start>4611</start><end>4611</end><line>133</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>910</id><start>1128</start><end>1128</end><line>29</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>255</id><start>1718</start><end>1718</end><line>51</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>569</id><start>4281</start><end>4281</end><line>125</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>228</id><start>1601</start><end>1601</end><line>46</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>264</id><start>1786</start><end>1786</end><line>54</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>578</id><start>4244</start><end>4287</end><line>125</line><description>x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nxx.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nyy)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>802</id><start>2661</start><end>2690</end><line>68</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.apply[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](input)(SigmoidDerivatives.this.sigmoidFirstDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>461</id><start>3954</start><end>3969</end><line>118</line><description>x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>775</id><start>2295</start><end>2295</end><line>59</line><description>SigmoidDerivatives.this.sigmoidFirstDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>811</id><start>2772</start><end>2772</end><line>70</line><description>SigmoidDerivatives.this.sigmoidThirdDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidThirdDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>784</id><start>2384</start><end>2384</end><line>61</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>129</id><start>2219</start><end>2266</end><line>57</line><description>innerBiasGradMat.apply[collection.immutable.::.type, breeze.linalg.*.type, breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](scala.`package`.::, breeze.linalg.*)(linalg.this.Broadcaster.canBroadcastColumns[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double])).*:*[breeze.linalg.BroadcastedColumns[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](SimpleDerivative.this.modifiedOuterWeight)(linalg.this.BroadcastedColumns.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>470</id><start>4041</start><end>4041</end><line>121</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>443</id><start>3903</start><end>3905</end><line>116</line><description>1.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>883</id><start>582</start><end>582</end><line>15</line><description>linalg.this.DenseMatrix.canCollapseCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero)</description><symbolName>breeze.linalg.operators.LowPriorityDenseMatrix1.canCollapseCols</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>138</id><start>2435</start><end>2435</end><line>61</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>452</id><start>3928</start><end>3928</end><line>117</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpSub</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpSub</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>479</id><start>4038</start><end>4038</end><line>121</line><description>linalg.this.Transpose.liftUFunc[breeze.numerics.sin.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](`package`.this.sin.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sin.sinDoubleImpl, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))), linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftUFunc</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>542</id><start>4217</start><end>4217</end><line>124</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>892</id><start>659</start><end>659</end><line>16</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>551</id><start>4224</start><end>4224</end><line>124</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>210</id><start>910</start><end>921</end><line>30</line><description>x1.*(x1minus1)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>560</id><start>4178</start><end>4235</end><line>124</line><description>x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](ny)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>219</id><start>1149</start><end>1188</end><line>37</line><description>x1x1Minus1.*(x2x2Minus1).*(nxx.+(nyy))</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>291</id><start>1839</start><end>1839</end><line>55</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>inputDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>757</id><start>1823</start><end>1857</end><line>46</line><description>SimpleDerivative.apply(this, multiIndex)</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>updateWeights</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>766</id><start>2050</start><end>2101</end><line>51</line><description>SimpleNetwork.this.outerWeights.:+=[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](weightGradient.outerWeightGradient)(linalg.this.DenseVector.canAddIntoD)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>/</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>838</id><start>662</start><end>686</end><line>20</line><description>WeightGradient.this.innerBiasGradient./[breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](scalar)(linalg.this.DenseVector.dv_s_Op_Double_OpDiv)</description><symbolName>breeze.linalg.ImmutableNumericOps./</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>120</id><start>2235</start><end>2235</end><line>57</line><description>linalg.this.DenseMatrix.handholdCanMapRows[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapRows</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:/=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>847</id><start>835</start><end>865</end><line>25</line><description>WeightGradient.this.outerWeightGradient.:/=[breeze.linalg.DenseVector[Double], Double](scalar)(linalg.this.DenseVector.dv_s_UpdateOp_Double_OpDiv)</description><symbolName>breeze.linalg.NumericOps.:/=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>165</id><start>2975</start><end>2975</end><line>77</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>506</id><start>4061</start><end>4061</end><line>121</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>856</id><start>1054</start><end>1101</end><line>32</line><description>WeightGradient.this.outerWeightGradient.+[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Nothing, breeze.linalg.DenseVector[Double]](other.outerWeightGradient)(linalg.this.DenseVector.canAddD)</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>515</id><start>4143</start><end>4143</end><line>123</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>237</id><start>1624</start><end>1638</end><line>47</line><description>input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, 1)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>246</id><start>1689</start><end>1689</end><line>50</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>793</id><start>2639</start><end>2639</end><line>67</line><description>linalg.this.DenseMatrix.scalarOf[Double]</description><symbolName>breeze.linalg.DenseMatrix.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:+=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>865</id><start>1285</start><end>1285</end><line>37</line><description>linalg.this.DenseVector.canAddIntoD</description><symbolName>breeze.linalg.DenseVector.canAddIntoD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>524</id><start>4158</start><end>4158</end><line>123</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>874</id><start>420</start><end>446</end><line>11</line><description>WeightGradientBatch.this.outerWeightGradients.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double])</description><symbolName>breeze.linalg.TensorLike.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>192</id><start>477</start><end>477</end><line>16</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>533</id><start>4104</start><end>4104</end><line>122</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>605</id><start>4691</start><end>4691</end><line>134</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>919</id><start>1205</start><end>1206</end><line>30</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>201</id><start>555</start><end>575</end><line>20</line><description>SimpleLaplacianModel.this.simpleNetwork.apply(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>614</id><start>4709</start><end>4711</end><line>134</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>273</id><start>1783</start><end>1783</end><line>54</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>60</id><start>865</start><end>866</end><line>23</line><description>SimpleDerivative.this.W</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.W</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:+=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>859</id><start>1181</start><end>1181</end><line>35</line><description>linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_dm_UpdateOp_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>213</id><start>981</start><end>981</end><line>33</line><description>`package`.this.sin.sinDoubleImpl</description><symbolName>breeze.numerics.sin.sinDoubleImpl</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>186</id><start>471</start><end>471</end><line>16</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>222</id><start>1336</start><end>1386</end><line>42</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.x).applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>87</id><start>1686</start><end>1693</end><line>44</line><description>input.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>437</id><start>3869</start><end>3871</end><line>114</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>96</id><start>1741</start><end>1759</end><line>44</line><description>SimpleDerivative.this.innerWeightGradMod</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.innerWeightGradMod</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>850</id><start>948</start><end>995</end><line>30</line><description>WeightGradient.this.innerWeightGradient.+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](other.innerWeightGradient)(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>509</id><start>4123</start><end>4123</end><line>123</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>168</id><start>2975</start><end>2975</end><line>77</line><description>linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpPow.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpPow, linalg.this.DenseMatrix.canMapCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet))</description><symbolName>breeze.linalg.BroadcastedRows.broadcastOp2</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>482</id><start>4031</start><end>4031</end><line>121</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>177</id><start>2997</start><end>2997</end><line>78</line><description>linalg.this.product.reduce_Double[breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.canIterateValues[Double])</description><symbolName>breeze.linalg.product.reduce_Double</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>518</id><start>4138</start><end>4138</end><line>123</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>715</id><start>1257</start><end>1258</end><line>30</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>724</id><start>1260</start><end>1260</end><line>30</line><description>linalg.this.BroadcastedColumns.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet))</description><symbolName>breeze.linalg.BroadcastedColumns.broadcastOp2</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>383</id><start>2297</start><end>2330</end><line>67</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.yy)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.inputDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>796</id><start>2639</start><end>2639</end><line>67</line><description>`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>392</id><start>2550</start><end>2561</end><line>78</line><description>x1.*(x1minus1)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>733</id><start>1391</start><end>1404</end><line>33</line><description>input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>805</id><start>2728</start><end>2728</end><line>69</line><description>linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseMatrix.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>150</id><start>2461</start><end>2461</end><line>61</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DVD_DMD_eq_DMD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>464</id><start>3994</start><end>3994</end><line>119</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>500</id><start>4098</start><end>4098</end><line>122</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>814</id><start>2817</start><end>2817</end><line>71</line><description>SigmoidDerivatives.this.sigmoidFourthDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>132</id><start>2280</start><end>2306</end><line>59</line><description>SimpleDerivative.this.simpleNetwork.outerWeights</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.outerWeights</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>159</id><start>2969</start><end>2970</end><line>77</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>473</id><start>4038</start><end>4038</end><line>121</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>141</id><start>2420</start><end>2420</end><line>61</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DVD_DMD_eq_DMD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>545</id><start>4206</start><end>4223</end><line>124</line><description>x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>554</id><start>4224</start><end>4224</end><line>124</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>778</id><start>2340</start><end>2340</end><line>60</line><description>SigmoidDerivatives.this.sigmoidSecondDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>787</id><start>2429</start><end>2429</end><line>62</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>105</id><start>2084</start><end>2085</end><line>54</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>419</id><start>3273</start><end>3314</end><line>96</line><description>nxxw.+(nyyw).*(x1x1Minus1.*(x2x2Minus1))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>446</id><start>3901</start><end>3901</end><line>116</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>updateWeights</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>760</id><start>1943</start><end>1994</end><line>49</line><description>SimpleNetwork.this.innerWeights.:+=[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](weightGradient.innerWeightGradient)(linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>455</id><start>3928</start><end>3928</end><line>117</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpSub.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpSub, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>114</id><start>2087</start><end>2087</end><line>54</line><description>linalg.this.BroadcastedColumns.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet))</description><symbolName>breeze.linalg.BroadcastedColumns.broadcastOp2</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>428</id><start>3726</start><end>3747</end><line>110</line><description>dny.applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>769</id><start>2251</start><end>2251</end><line>58</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>868</id><start>369</start><end>392</end><line>11</line><description>WeightGradientBatch.this.innerWeightGradients.apply(i)</description><symbolName>scala.collection.SeqLike.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>/</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>841</id><start>615</start><end>715</end><line>19</line><description>WeightGradient.apply(WeightGradient.this.innerWeightGradient./[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpDiv), WeightGradient.this.innerBiasGradient./[breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](scalar)(linalg.this.DenseVector.dv_s_Op_Double_OpDiv), WeightGradient.this.outerWeightGradient./[breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](scalar)(linalg.this.DenseVector.dv_s_Op_Double_OpDiv))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>123</id><start>2243</start><end>2243</end><line>57</line><description>linalg.this.DenseMatrix.handholdCanMapRows[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapRows</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>527</id><start>4158</start><end>4158</end><line>123</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>195</id><start>468</start><end>480</end><line>16</line><description>l.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](l)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))./[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpDiv.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpDiv, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps./</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>536</id><start>4104</start><end>4104</end><line>122</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>204</id><start>696</start><end>736</end><line>23</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.xx).apply(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutput</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>742</id><start>1564</start><end>1598</end><line>39</line><description>SimpleNetwork.this.innerWeights.*[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](input)(linalg.this.DenseMatrix.implOpMulMatrix_DMD_DVD_eq_DVD).+[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Nothing, breeze.linalg.DenseVector[Double]](SimpleNetwork.this.innerBias)(linalg.this.DenseVector.canAddD)</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>401</id><start>2813</start><end>2852</end><line>85</line><description>x1x1Minus1.*(x2x2Minus1).*(nxx.+(nyy))</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>410</id><start>3159</start><end>3160</end><line>94</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>751</id><start>1730</start><end>1730</end><line>43</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>69</id><start>1165</start><end>1165</end><line>32</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>823</id><start>374</start><end>374</end><line>10</line><description>linalg.this.DenseVector.s_dv_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.s_dv_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>78</id><start>1483</start><end>1483</end><line>39</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:*=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>832</id><start>511</start><end>539</end><line>14</line><description>WeightGradient.this.innerBiasGradient.:*=[breeze.linalg.DenseVector[Double], Double](scalar)(linalg.this.DenseVector.dv_s_UpdateOp_Double_OpMulScalar)</description><symbolName>breeze.linalg.NumericOps.:*=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>491</id><start>4081</start><end>4081</end><line>122</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>697</id><start>837</start><end>837</end><line>19</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>231</id><start>1596</start><end>1610</end><line>46</line><description>input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, 0)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>706</id><start>1104</start><end>1104</end><line>27</line><description>linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseMatrix.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>332</id><start>1936</start><end>1936</end><line>57</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>772</id><start>2295</start><end>2295</end><line>59</line><description>linalg.this.DenseVector.scalarOf[Double]</description><symbolName>breeze.linalg.DenseVector.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>90</id><start>1701</start><end>1701</end><line>44</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>404</id><start>2917</start><end>2942</end><line>88</line><description>dnx.weightGradient(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.weightGradient</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>431</id><start>3841</start><end>3843</end><line>113</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>745</id><start>1723</start><end>1725</end><line>43</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>63</id><start>809</start><end>875</end><line>23</line><description>mat.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).:=[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](SimpleDerivative.matrixVectorPowerProduct(SimpleDerivative.this.W, powers))(linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)</description><symbolName>breeze.linalg.NumericOps.:=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>99</id><start>1695</start><end>1695</end><line>44</line><description>linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_DM_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>978</id><start>2363</start><end>2363</end><line>63</line><description>linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_dm_UpdateOp_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>960</id><start>2070</start><end>2070</end><line>52</line><description>linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_DM_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>646</id><start>4881</start><end>4881</end><line>136</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>727</id><start>1381</start><end>1383</end><line>33</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>45</id><start>396</start><end>441</end><line>10</line><description>SimpleDerivative.this.simpleNetwork.outerWeights.*:*[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](SimpleDerivative.this.weightModifier)(linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar)</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>386</id><start>2394</start><end>2405</end><line>71</line><description>dnxx.apply(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>395</id><start>2645</start><end>2645</end><line>81</line><description>`package`.this.sin.sinDoubleImpl</description><symbolName>breeze.numerics.sin.sinDoubleImpl</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>54</id><start>748</start><end>757</end><line>19</line><description>powers.apply(i)</description><symbolName>breeze.linalg.DenseVector.apply</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>808</id><start>2772</start><end>2772</end><line>70</line><description>linalg.this.DenseMatrix.scalarOf[Double]</description><symbolName>breeze.linalg.DenseMatrix.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>682</id><start>491</start><end>544</end><line>12</line><description>SimpleNetwork.this.outerWeights.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](breeze.numerics.`package`.sigmoid.apply[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](SimpleNetwork.this.hiddenPreOutputBatch(input))(`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))))(linalg.this.DenseMatrix.implOpMulMatrix_DVTt_DMT_eq_DMT[Double](linalg.this.DenseMatrix.implOpMulMatrix_DMD_DMD_eq_DMD))</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>341</id><start>1949</start><end>1949</end><line>57</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>691</id><start>777</start><end>777</end><line>18</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>422</id><start>3452</start><end>3483</end><line>102</line><description>SimpleLaplacianModel.this.simpleNetwork.applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>updateWeights</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>763</id><start>1999</start><end>2045</end><line>50</line><description>SimpleNetwork.this.innerBias.:+=[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](weightGradient.innerBiasGradient)(linalg.this.DenseVector.canAddIntoD)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>171</id><start>3012</start><end>3014</end><line>78</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>377</id><start>1981</start><end>1981</end><line>57</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>718</id><start>1264</start><end>1276</end><line>30</line><description>SimpleNetwork.this.outerWeights</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.outerWeights</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>72</id><start>1169</start><end>1243</end><line>32</line><description>SimpleNetwork.getDerivative(SimpleDerivative.this.multiIndex.total, SimpleDerivative.this.simpleNetwork.hiddenPreOutputBatch(input))</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.getDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>413</id><start>3153</start><end>3204</end><line>94</line><description>nxw.*(2.0).*(x1minus1.*(x2x2Minus1).+(x1.*(x2x2Minus1)))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>799</id><start>2683</start><end>2683</end><line>68</line><description>SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble</description><symbolName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>81</id><start>1541</start><end>1601</end><line>40</line><description>SimpleNetwork.getDerivative(SimpleDerivative.this.multiIndex.total.+(1), preOutput)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.getDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>144</id><start>2453</start><end>2453</end><line>61</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>485</id><start>4045</start><end>4045</end><line>121</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>494</id><start>4095</start><end>4097</end><line>122</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>126</id><start>2243</start><end>2243</end><line>57</line><description>linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_UpdateOp_Double_OpSet</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>153</id><start>2486</start><end>2486</end><line>61</line><description>linalg.this.DenseMatrix.op_DM_DM_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_DM_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>467</id><start>4041</start><end>4041</end><line>121</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>162</id><start>2968</start><end>2968</end><line>77</line><description>linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>359</id><start>1915</start><end>1915</end><line>56</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>700</id><start>829</start><end>829</end><line>19</line><description>linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD)</description><symbolName>breeze.linalg.operators.DenseVector_GenericOps.liftDMOpToDVTransposeOp</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>673</id><start>504</start><end>504</end><line>12</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>368</id><start>2022</start><end>2031</end><line>58</line><description>nxx.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nyy)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>27</id><start>878</start><end>925</end><line>30</line><description>sigma.*(1.-(sigma)).*(1.-(6.*(sigma)).+(6.*(sigma).*(sigma)))</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>709</id><start>1183</start><end>1183</end><line>29</line><description>linalg.this.DenseMatrix.scalarOf[Double]</description><symbolName>breeze.linalg.DenseMatrix.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>781</id><start>2317</start><end>2347</end><line>60</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](input)(SigmoidDerivatives.this.sigmoidSecondDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidSecondDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>36</id><start>1204</start><end>1205</end><line>39</line><description>5</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>440</id><start>3876</start><end>3876</end><line>114</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>754</id><start>1730</start><end>1730</end><line>43</line><description>linalg.this.DenseMatrix.canMapRows[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)</description><symbolName>breeze.linalg.DenseMatrix.canMapRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>790</id><start>2429</start><end>2429</end><line>62</line><description>SigmoidDerivatives.this.sigmoidFourthDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidFourthDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>135</id><start>2412</start><end>2412</end><line>61</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>449</id><start>3898</start><end>3905</end><line>116</line><description>x1.-[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](1.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpSub.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpSub, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.-</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>476</id><start>4038</start><end>4038</end><line>121</line><description>`package`.this.sin.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sin.sinDoubleImpl, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>108</id><start>2091</start><end>2105</end><line>54</line><description>SimpleDerivative.this.weightModifier</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.weightModifier</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>458</id><start>3957</start><end>3957</end><line>118</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>117</id><start>2134</start><end>2194</end><line>56</line><description>SimpleNetwork.getDerivative(SimpleDerivative.this.multiIndex.total.+(1), preOutput)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.getDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>969</id><start>2141</start><end>2190</end><line>55</line><description>WeightGradientBatch.this.outerWeightGradients.+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](other.outerWeightGradients)(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>655</id><start>5061</start><end>5068</end><line>145</line><description>breeze.numerics.constants.`package`.Pi.*(x1)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>350</id><start>1969</start><end>1969</end><line>57</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>323</id><start>1908</start><end>1908</end><line>56</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>9</id><start>355</start><end>355</end><line>11</line><description>`package`.this.sigmoid.sigmoidImplDouble</description><symbolName>breeze.numerics.sigmoid.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>664</id><start>374</start><end>396</end><line>9</line><description>SimpleNetwork.this.hiddenPreOutput(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.hiddenPreOutput</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>18</id><start>636</start><end>645</end><line>21</line><description>1.-(2.*(sigma))</description><symbolName>scala.Int.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>736</id><start>1367</start><end>1405</end><line>33</line><description>innerBiasGrad.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).*[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double]](input.apply[collection.immutable.::.type, Int, breeze.linalg.DenseVector[Double]](scala.`package`.::, i)(linalg.this.DenseMatrix.canSliceCol[Double]).t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))(linalg.this.DenseVector.liftDMOpToDVTransposeOp[breeze.linalg.operators.OpMulMatrix.type, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.implOpMulMatrix_DVD_DMD_eq_DMD))</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>389</id><start>2467</start><end>2475</end><line>74</line><description>input.apply(1)</description><symbolName>breeze.linalg.DenseVector.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>362</id><start>2001</start><end>2001</end><line>58</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>48</id><start>614</start><end>620</end><line>15</line><description>SimpleDerivative.this.W.cols</description><symbolName>breeze.linalg.DenseMatrix.cols</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>703</id><start>1021</start><end>1048</end><line>25</line><description>SimpleNetwork.this.hiddenPreOutputBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.hiddenPreOutputBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>21</id><start>859</start><end>869</end><line>29</line><description>breeze.numerics.`package`.sigmoid.apply[Double, Double](x)(`package`.this.sigmoid.sigmoidImplDouble)</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>57</id><start>705</start><end>802</end><line>18</line><description>powers.update(i, if (powers.apply(i).==(0.0))
  powers.apply(i)
else
  powers.apply(i).-(1))</description><symbolName>breeze.linalg.DenseVector.update</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>909</id><start>1131</start><end>1133</end><line>29</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>263</id><start>1786</start><end>1786</end><line>54</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>676</id><start>515</start><end>515</end><line>12</line><description>`package`.this.sigmoid.sigmoidImplDouble</description><symbolName>breeze.numerics.sigmoid.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>272</id><start>1783</start><end>1783</end><line>54</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>344</id><start>1949</start><end>1949</end><line>57</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>685</id><start>702</start><end>702</end><line>17</line><description>`package`.this.sigmoid.sigmoidImplDouble</description><symbolName>breeze.numerics.sigmoid.sigmoidImplDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>317</id><start>1904</start><end>1906</end><line>56</line><description>2.0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</source><package>org.alexguldemond.pdenetwork</package><class>MultiIndex</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.MultiIndex</fullClassName><method>dim</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</path><id>3</id><start>127</start><end>138</end><line>7</line><description>MultiIndex.this.values.size</description><symbolName>scala.collection.SeqLike.size</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>658</id><start>5078</start><end>5085</end><line>145</line><description>1.0.-(x1)</description><symbolName>scala.Double.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>353</id><start>1974</start><end>1974</end><line>57</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFirstDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>12</id><start>367</start><end>384</end><line>12</line><description>sigma.*(1.-(sigma))</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>84</id><start>1615</start><end>1641</end><line>42</line><description>SimpleDerivative.this.simpleNetwork.outerWeights</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.outerWeights</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>425</id><start>3594</start><end>3627</end><line>106</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.xx)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.inputDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>93</id><start>1714</start><end>1735</end><line>44</line><description>SimpleDerivative.this.multiIndex.asVector.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>434</id><start>3848</start><end>3848</end><line>113</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>900</id><start>745</start><end>745</end><line>19</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>102</id><start>1943</start><end>1970</end><line>51</line><description>SimpleDerivative.this.simpleNetwork.hiddenPreOutputBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.hiddenPreOutputBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>972</id><start>2284</start><end>2284</end><line>59</line><description>collection.this.Seq.canBuildFrom[(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])]</description><symbolName>scala.collection.Seq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>631</id><start>4787</start><end>4804</end><line>135</line><description>x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>981</id><start>2417</start><end>2417</end><line>64</line><description>linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.dm_dm_UpdateOp_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>954</id><start>1819</start><end>1848</end><line>45</line><description>WeightGradientBatch.this.innerBiasGradients.:*=[breeze.linalg.DenseMatrix[Double], Double](scalar)(linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpMulScalar)</description><symbolName>breeze.linalg.NumericOps.:*=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>326</id><start>1908</start><end>1908</end><line>56</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>640</id><start>4806</start><end>4806</end><line>135</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>299</id><start>1814</start><end>1848</end><line>55</line><description>x1x1Minus1.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](n)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>335</id><start>1936</start><end>1936</end><line>57</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>308</id><start>1888</start><end>1888</end><line>56</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>649</id><start>4870</start><end>4895</end><line>136</line><description>x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>380</id><start>2153</start><end>2185</end><line>64</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.x)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.inputDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>721</id><start>1260</start><end>1260</end><line>30</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>75</id><start>1145</start><end>1243</end><line>32</line><description>SimpleDerivative.this.modifiedOuterWeight.t[breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseMatrix[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](SimpleNetwork.getDerivative(SimpleDerivative.this.multiIndex.total, SimpleDerivative.this.simpleNetwork.hiddenPreOutputBatch(input)))(linalg.this.DenseMatrix.implOpMulMatrix_DVTt_DMT_eq_DMT[Double](linalg.this.DenseMatrix.implOpMulMatrix_DMD_DMD_eq_DMD))</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>416</id><start>3224</start><end>3263</end><line>95</line><description>x1x1Minus1.*(x2minus1).+(x1x1Minus1.*(x2))</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>730</id><start>1396</start><end>1396</end><line>33</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>927</id><start>1211</start><end>1211</end><line>30</line><description>linalg.this.DenseMatrix.canMapCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)</description><symbolName>breeze.linalg.DenseMatrix.canMapCols</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>963</id><start>1985</start><end>2074</end><line>51</line><description>WeightGradientBatch.this.innerWeightGradients.zip[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Seq[(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])]](other.innerWeightGradients)(collection.this.Seq.canBuildFrom[(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])]).withFilter(((check$ifrefutable$3: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])) =&gt; (check$ifrefutable$3: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]) @unchecked) match {
  case (_1: breeze.linalg.DenseMatrix[Double], _2: breeze.linalg.DenseMatrix[Double])(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])((w @ _), (ow @ _)) =&gt; true
  case _ =&gt; false
})).map[breeze.linalg.DenseMatrix[Double], Seq[breeze.linalg.DenseMatrix[Double]]](((x$5: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])) =&gt; (x$5: (breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]) @unchecked) match {
  case (_1: breeze.linalg.DenseMatrix[Double], _2: breeze.linalg.DenseMatrix[Double])(breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double])((w @ _), (ow @ _)) =&gt; w.+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](ow)(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd)
}))(collection.this.Seq.canBuildFrom[breeze.linalg.DenseMatrix[Double]])</description><symbolName>scala.collection.generic.FilterMonadic.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>622</id><start>4620</start><end>4714</end><line>134</line><description>weightGradient.inPlaceSum(nxw.elemProd(x1minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.inPlaceSum</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>936</id><start>1274</start><end>1365</end><line>32</line><description>WeightGradientBatch.this.innerWeightGradients.zip[breeze.linalg.DenseMatrix[Double], Double, Seq[(breeze.linalg.DenseMatrix[Double], Double)]](vec.toScalaVector()((ClassTag.Double: scala.reflect.ClassTag[Double])))(collection.this.Seq.canBuildFrom[(breeze.linalg.DenseMatrix[Double], Double)]).withFilter(((check$ifrefutable$2: (breeze.linalg.DenseMatrix[Double], Double)) =&gt; (check$ifrefutable$2: (breeze.linalg.DenseMatrix[Double], Double) @unchecked) match {
  case (_1: breeze.linalg.DenseMatrix[Double], _2: Double)(breeze.linalg.DenseMatrix[Double], Double)((w @ _), (scalar @ _)) =&gt; true
  case _ =&gt; false
})).map[breeze.linalg.DenseMatrix[Double], Seq[breeze.linalg.DenseMatrix[Double]]](((x$2: (breeze.linalg.DenseMatrix[Double], Double)) =&gt; (x$2: (breeze.linalg.DenseMatrix[Double], Double) @unchecked) match {
  case (_1: breeze.linalg.DenseMatrix[Double], _2: Double)(breeze.linalg.DenseMatrix[Double], Double)((w @ _), (scalar @ _)) =&gt; w.*[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix)
}))(collection.this.Seq.canBuildFrom[breeze.linalg.DenseMatrix[Double]])</description><symbolName>scala.collection.generic.FilterMonadic.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>281</id><start>1790</start><end>1790</end><line>54</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>595</id><start>4611</start><end>4611</end><line>133</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>prod</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>945</id><start>1667</start><end>1667</end><line>41</line><description>linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_S_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>290</id><start>1839</start><end>1839</end><line>55</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>604</id><start>4671</start><end>4671</end><line>134</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>371</id><start>2017</start><end>2017</end><line>58</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>30</id><start>1158</start><end>1160</end><line>39</line><description>-1</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>712</id><start>1183</start><end>1183</end><line>29</line><description>SigmoidDerivatives.this.sigmoidFirstDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidFirstDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>39</id><start>1151</start><end>1207</end><line>39</line><description>ex.unary_-.*(-1.+(11.*(ex)).-(11.*(ex).*(ex)).+(ex.*(ex).*(ex)))./(breeze.numerics.`package`.pow.apply[Double, Int, Double](1.+(ex), 5)(`package`.this.pow.powDoubleIntImpl))</description><symbolName>scala.Double./</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>918</id><start>1108</start><end>1142</end><line>29</line><description>WeightGradientBatch.this.outerWeightGradients.apply[breeze.linalg.*.type, collection.immutable.::.type, breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](breeze.linalg.*, scala.`package`.::)(linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])).*:*[breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](vec)(linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.DenseMatrix.canMapCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero, linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet)))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>111</id><start>2087</start><end>2087</end><line>54</line><description>storage.this.Zero.DoubleZero</description><symbolName>breeze.storage.Zero.DoubleZero</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>586</id><start>4402</start><end>4432</end><line>129</line><description>dny.weightGradientBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.weightGradientBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>667</id><start>373</start><end>373</end><line>9</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>398</id><start>2699</start><end>2747</end><line>83</line><description>2.*(x1minus1.*(x2x2Minus1).+(x1.*(x2x2Minus1))).*(nx)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutput</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>739</id><start>1578</start><end>1578</end><line>39</line><description>linalg.this.DenseMatrix.implOpMulMatrix_DMD_DVD_eq_DVD</description><symbolName>breeze.linalg.operators.DenseMatrixMultiplyStuff.implOpMulMatrix_DMD_DVD_eq_DVD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>66</id><start>982</start><end>1051</end><line>29</line><description>SimpleNetwork.getDerivative(SimpleDerivative.this.multiIndex.total, SimpleDerivative.this.simpleNetwork.hiddenPreOutput(input))</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.getDerivative</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>407</id><start>3040</start><end>3066</end><line>91</line><description>dnyy.weightGradient(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.weightGradient</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>hiddenPreOutputBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>748</id><start>1722</start><end>1722</end><line>43</line><description>linalg.this.Broadcaster.canBroadcastColumns[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapRows[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastColumns</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>613</id><start>4686</start><end>4686</end><line>134</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>694</id><start>751</start><end>751</end><line>18</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>356</id><start>1915</start><end>1915</end><line>56</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>15</id><start>624</start><end>633</end><line>21</line><description>1.-(sigma)</description><symbolName>scala.Int.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>length</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>867</id><start>305</start><end>330</end><line>9</line><description>WeightGradientBatch.this.innerWeightGradients.size</description><symbolName>scala.collection.SeqLike.size</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>903</id><start>907</start><end>919</end><line>22</line><description>breeze.linalg.`package`.InjectNumericOps[Double](scalar).*[Double, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](mat)(linalg.this.DenseMatrix.s_dm_op_Double_OpMulMatrix)</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>562</id><start>4170</start><end>4170</end><line>123</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>230</id><start>1609</start><end>1609</end><line>46</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:+=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>858</id><start>1185</start><end>1210</end><line>35</line><description>other.innerWeightGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.innerWeightGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>42</id><start>280</start><end>345</end><line>8</line><description>SimpleDerivative.matrixVectorPowerProduct(SimpleDerivative.this.W, SimpleDerivative.this.multiIndex.asVector)</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.matrixVectorPowerProduct</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>&lt;none&gt;</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>51</id><start>679</start><end>698</end><line>17</line><description>SimpleDerivative.this.multiIndex.asVector</description><symbolName>org.alexguldemond.pdenetwork.MultiIndex.asVector</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>939</id><start>1528</start><end>1533</end><line>38</line><description>vec.t[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double]](linalg.this.Transpose.canUntranspose[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.ImmutableNumericOps.t</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>257</id><start>1755</start><end>1755</end><line>52</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>598</id><start>4611</start><end>4611</end><line>133</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidThirdDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>24</id><start>901</start><end>908</end><line>30</line><description>6.*(sigma)</description><symbolName>scala.Int.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>applyBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>679</id><start>508</start><end>544</end><line>12</line><description>breeze.numerics.`package`.sigmoid.apply[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](SimpleNetwork.this.hiddenPreOutputBatch(input))(`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>338</id><start>1962</start><end>1962</end><line>57</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>374</id><start>1981</start><end>1981</end><line>57</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>347</id><start>1969</start><end>1969</end><line>57</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</source><package>org.alexguldemond.pdenetwork</package><class>sigmoidImplDouble</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidFourthDerivative.sigmoidImplDouble</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/Sigmoid.scala</path><id>33</id><start>1181</start><end>1189</end><line>39</line><description>ex.*(ex).*(ex)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>weightGradient</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>688</id><start>695</start><end>713</end><line>17</line><description>breeze.numerics.`package`.sigmoid.apply[breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](preOutput)(`package`.this.sigmoid.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sigmoid.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</source><package>org.alexguldemond.pdenetwork</package><class>MultiIndex</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.MultiIndex</fullClassName><method>asVector</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/MultiIndex.scala</path><id>6</id><start>266</start><end>266</end><line>13</line><description>collection.this.Seq.canBuildFrom[Double]</description><symbolName>scala.collection.Seq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>885</id><start>555</start><end>589</end><line>15</line><description>WeightGradientBatch.this.outerWeightGradients.apply[breeze.linalg.*.type, collection.immutable.::.type, breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]]](breeze.linalg.*, scala.`package`.::)(linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])).dot[breeze.linalg.BroadcastedRows[breeze.linalg.DenseMatrix[Double],breeze.linalg.DenseVector[Double]], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double]](vec)(linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpMulInner.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.canDotD, linalg.this.DenseMatrix.canCollapseCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero)))</description><symbolName>breeze.linalg.ImmutableNumericOps.dot</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>894</id><start>659</start><end>659</end><line>16</line><description>linalg.this.BroadcastedRows.broadcastOp2[breeze.linalg.operators.OpMulInner.type, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double], linalg.this.DenseVector.canDotD, linalg.this.DenseMatrix.canCollapseCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero))</description><symbolName>breeze.linalg.BroadcastedRows.broadcastOp2</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>553</id><start>4224</start><end>4224</end><line>124</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>248</id><start>1689</start><end>1689</end><line>50</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>589</id><start>4598</start><end>4598</end><line>133</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>652</id><start>4904</start><end>4938</end><line>138</line><description>weightGradient.elemProd(laplacian)</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.elemProd</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>221</id><start>1291</start><end>1322</end><line>41</line><description>SimpleLaplacianModel.this.simpleNetwork.applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.SimpleNetwork.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>975</id><start>2324</start><end>2332</end><line>60</line><description>w.:+=[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](ow)(linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.:+=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>320</id><start>1903</start><end>1903</end><line>56</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>634</id><start>4785</start><end>4785</end><line>135</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>661</id><start>5072</start><end>5125</end><line>145</line><description>x1.*(1.0.-(x1)).*(x2).*(1.-(x2)).*(SimpleLaplacianModel.this.simpleNetwork.apply(input))</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>670</id><start>362</start><end>362</end><line>9</line><description>linalg.this.DenseVector.canDotD</description><symbolName>breeze.linalg.DenseVector.canDotD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>329</id><start>1849</start><end>1849</end><line>55</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>302</id><start>1806</start><end>1806</end><line>54</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>643</id><start>4746</start><end>4811</end><line>135</line><description>nyw.elemProd(x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.elemProd</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>876</id><start>576</start><end>577</end><line>15</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>849</id><start>968</start><end>968</end><line>30</line><description>linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_DM_Double_OpAdd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>535</id><start>4104</start><end>4104</end><line>122</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>prod</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>948</id><start>1677</start><end>1706</end><line>41</line><description>WeightGradientBatch.this.outerWeightGradients.*[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix)</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>203</id><start>642</start><end>681</end><line>22</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.y).apply(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>544</id><start>4217</start><end>4217</end><line>124</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>957</id><start>2026</start><end>2052</end><line>51</line><description>other.innerWeightGradients</description><symbolName>org.alexguldemond.pdenetwork.WeightGradientBatch.innerWeightGradients</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>930</id><start>1320</start><end>1339</end><line>32</line><description>vec.toScalaVector()((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.toScalaVector</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>275</id><start>1780</start><end>1790</end><line>54</line><description>breeze.numerics.`package`.sin.apply[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](breeze.numerics.constants.`package`.Pi)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftUFunc[breeze.numerics.sin.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](`package`.this.sin.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sin.sinDoubleImpl, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))), linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>212</id><start>982</start><end>987</end><line>33</line><description>breeze.numerics.constants.`package`.Pi.*(x1)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>616</id><start>4707</start><end>4707</end><line>134</line><description>linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_s_Op_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>sum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>966</id><start>2088</start><end>2133</end><line>54</line><description>WeightGradientBatch.this.innerBiasGradients.+[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseMatrix[Double]](other.innerBiasGradients)(linalg.this.DenseMatrix.op_DM_DM_Double_OpAdd)</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>311</id><start>1888</start><end>1888</end><line>56</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>625</id><start>4772</start><end>4772</end><line>135</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>284</id><start>1790</start><end>1790</end><line>54</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>293</id><start>1839</start><end>1839</end><line>55</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>365</id><start>2026</start><end>2026</end><line>58</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>526</id><start>4158</start><end>4158</end><line>123</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>/</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>840</id><start>688</start><end>714</end><line>20</line><description>WeightGradient.this.outerWeightGradient./[breeze.linalg.DenseVector[Double], Double, breeze.linalg.DenseVector[Double]](scalar)(linalg.this.DenseVector.dv_s_Op_Double_OpDiv)</description><symbolName>breeze.linalg.ImmutableNumericOps./</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>912</id><start>1135</start><end>1135</end><line>29</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>571</id><start>4281</start><end>4281</end><line>125</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>921</id><start>1204</start><end>1204</end><line>30</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>266</id><start>1786</start><end>1786</end><line>54</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>580</id><start>4236</start><end>4236</end><line>124</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>607</id><start>4691</start><end>4691</end><line>134</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>239</id><start>1662</start><end>1662</end><line>49</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>314</id><start>1883</start><end>1883</end><line>56</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>628</id><start>4798</start><end>4798</end><line>135</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>+</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>852</id><start>1021</start><end>1021</end><line>31</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>*</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>825</id><start>404</start><end>423</end><line>10</line><description>WeightGradient.this.outerWeightGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.outerWeightGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>511</id><start>4123</start><end>4123</end><line>123</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:+=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>861</id><start>1237</start><end>1260</end><line>36</line><description>other.innerBiasGradient</description><symbolName>org.alexguldemond.pdenetwork.WeightGradient.innerBiasGradient</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>520</id><start>4138</start><end>4138</end><line>123</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:*=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>834</id><start>544</start><end>574</end><line>15</line><description>WeightGradient.this.outerWeightGradient.:*=[breeze.linalg.DenseVector[Double], Double](scalar)(linalg.this.DenseVector.dv_s_UpdateOp_Double_OpMulScalar)</description><symbolName>breeze.linalg.NumericOps.:*=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>152</id><start>2490</start><end>2508</end><line>61</line><description>SimpleDerivative.this.innerWeightGradMod</description><symbolName>org.alexguldemond.pdenetwork.SimpleDerivative.innerWeightGradMod</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>179</id><start>2997</start><end>2997</end><line>78</line><description>linalg.this.DenseMatrix.canCollapseCols[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]), storage.this.Zero.DoubleZero)</description><symbolName>breeze.linalg.operators.LowPriorityDenseMatrix1.canCollapseCols</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>493</id><start>4081</start><end>4081</end><line>122</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>933</id><start>1358</start><end>1358</end><line>33</line><description>linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix</description><symbolName>breeze.linalg.operators.DenseMatrixOps.op_DM_S_Double_OpMulMatrix</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>906</id><start>811</start><end>920</end><line>21</line><description>vec.toScalaVector()((ClassTag.Double: scala.reflect.ClassTag[Double])).zip[Double, breeze.linalg.DenseMatrix[Double], scala.collection.immutable.Vector[(Double, breeze.linalg.DenseMatrix[Double])]](WeightGradientBatch.this.innerWeightGradients)(immutable.this.Vector.canBuildFrom[(Double, breeze.linalg.DenseMatrix[Double])]).withFilter(((check$ifrefutable$1: (Double, breeze.linalg.DenseMatrix[Double])) =&gt; (check$ifrefutable$1: (Double, breeze.linalg.DenseMatrix[Double]) @unchecked) match {
  case (_1: Double, _2: breeze.linalg.DenseMatrix[Double])(Double, breeze.linalg.DenseMatrix[Double])((scalar @ _), (mat @ _)) =&gt; true
  case _ =&gt; false
})).foreach[breeze.linalg.DenseMatrix[Double]](((x$1: (Double, breeze.linalg.DenseMatrix[Double])) =&gt; (x$1: (Double, breeze.linalg.DenseMatrix[Double]) @unchecked) match {
  case (_1: Double, _2: breeze.linalg.DenseMatrix[Double])(Double, breeze.linalg.DenseMatrix[Double])((scalar @ _), (mat @ _)) =&gt; innerWeightSum.:+=[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](breeze.linalg.`package`.InjectNumericOps[Double](scalar).*[Double, breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](mat)(linalg.this.DenseMatrix.s_dm_op_Double_OpMulMatrix))(linalg.this.DenseMatrix.dm_dm_UpdateOp_Double_OpAdd)
}))</description><symbolName>scala.collection.generic.FilterMonadic.foreach</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>188</id><start>471</start><end>471</end><line>16</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>592</id><start>4598</start><end>4598</end><line>133</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>502</id><start>4098</start><end>4098</end><line>122</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>prod</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>942</id><start>1635</start><end>1645</end><line>41</line><description>x$3.*[breeze.linalg.DenseMatrix[Double], Double, breeze.linalg.DenseMatrix[Double]](scalar)(linalg.this.DenseMatrix.op_DM_S_Double_OpMulMatrix)</description><symbolName>breeze.linalg.ImmutableNumericOps.*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>260</id><start>1755</start><end>1755</end><line>52</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>601</id><start>4671</start><end>4671</end><line>134</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>610</id><start>4686</start><end>4686</end><line>134</line><description>linalg.this.DenseVector.canAddD</description><symbolName>breeze.linalg.DenseVector.canAddD</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>269</id><start>1783</start><end>1783</end><line>54</line><description>`package`.this.sin.sinDoubleImpl</description><symbolName>breeze.numerics.sin.sinDoubleImpl</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>807</id><start>2705</start><end>2735</end><line>69</line><description>org.alexguldemond.pdenetwork.SigmoidDerivatives.sigmoidSecondDerivative.apply[breeze.linalg.DenseMatrix[Double], breeze.linalg.DenseMatrix[Double]](input)(SigmoidDerivatives.this.sigmoidSecondDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidSecondDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))))</description><symbolName>breeze.generic.UFunc.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>816</id><start>2817</start><end>2817</end><line>71</line><description>SigmoidDerivatives.this.sigmoidFourthDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseMatrix[Double], Double, Double, breeze.linalg.DenseMatrix[Double]](linalg.this.DenseMatrix.scalarOf[Double], SigmoidDerivatives.this.sigmoidFourthDerivative.sigmoidImplDouble, linalg.this.DenseMatrix.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>475</id><start>4038</start><end>4038</end><line>121</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>888</id><start>652</start><end>652</end><line>16</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>170</id><start>3010</start><end>3011</end><line>78</line><description>breeze.linalg.*</description><symbolName>breeze.linalg.*</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>484</id><start>4031</start><end>4031</end><line>121</line><description>linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.TransposeLowPrio.liftOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>weightGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>143</id><start>2454</start><end>2456</end><line>61</line><description>scala.`package`.::</description><symbolName>scala.::</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>897</id><start>746</start><end>774</end><line>19</line><description>WeightGradientBatch.this.innerWeightGradients.apply(0).rows</description><symbolName>breeze.linalg.DenseMatrix.rows</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>215</id><start>997</start><end>1026</end><line>34</line><description>2.*(x1x1Minus1.+(x2x2Minus1)).*(n)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>556</id><start>4229</start><end>4229</end><line>124</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>565</id><start>4256</start><end>4256</end><line>125</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>798</id><start>2683</start><end>2683</end><line>68</line><description>linalg.this.DenseMatrix.scalarOf[Double]</description><symbolName>breeze.linalg.DenseMatrix.scalarOf</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>466</id><start>3991</start><end>4006</end><line>119</line><description>x2.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.*:*</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>780</id><start>2340</start><end>2340</end><line>60</line><description>SigmoidDerivatives.this.sigmoidSecondDerivative.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], SigmoidDerivatives.this.sigmoidSecondDerivative.sigmoidImplDouble, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double])))</description><symbolName>breeze.generic.MappingUFunc.fromLowOrderCanMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>547</id><start>4204</start><end>4204</end><line>124</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>287</id><start>1826</start><end>1826</end><line>55</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradient</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradient</fullClassName><method>:/=</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradient.scala</path><id>843</id><start>767</start><end>797</end><line>23</line><description>WeightGradient.this.innerWeightGradient.:/=[breeze.linalg.DenseMatrix[Double], Double](scalar)(linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpDiv)</description><symbolName>breeze.linalg.NumericOps.:/=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleDerivative</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleDerivative</fullClassName><method>matrixVectorPowerProduct</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleDerivative.scala</path><id>161</id><start>2968</start><end>2968</end><line>77</line><description>linalg.this.DenseMatrix.handholdCanMapCols[Double]</description><symbolName>breeze.linalg.DenseMatrix.handholdCanMapCols</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>915</id><start>1135</start><end>1135</end><line>29</line><description>linalg.this.DenseVector.dv_dv_UpdateOp_Double_OpSet</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_UpdateOp_Double_OpSet</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>574</id><start>4272</start><end>4272</end><line>125</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>elemProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>924</id><start>1211</start><end>1211</end><line>30</line><description>linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar</description><symbolName>breeze.linalg.operators.DenseVectorOps.dv_dv_Op_Double_OpMulScalar</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>242</id><start>1662</start><end>1662</end><line>49</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>583</id><start>4028</start><end>4287</end><line>124</line><description>x2.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](breeze.numerics.`package`.sin.apply[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](breeze.numerics.constants.`package`.Pi)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftUFunc[breeze.numerics.sin.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](`package`.this.sin.fromLowOrderCanMapValues[breeze.linalg.DenseVector[Double], Double, Double, breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.scalarOf[Double], `package`.this.sin.sinDoubleImpl, linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))), linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](SimpleLaplacianModel.minusPiSquared)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](n)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nx)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](2.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](ny)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x1x1Minus1.*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](x2x2Minus1)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))).*:*[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nxx.+[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Nothing, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](nyy)(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpMulScalar.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.dv_dv_Op_Double_OpMulScalar, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))))(linalg.this.Transpose.liftOps[breeze.linalg.operators.OpAdd.type, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](linalg.this.DenseVector.canAddD, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.NumericOps.+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>251</id><start>1686</start><end>1693</end><line>50</line><description>x2.-[breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]], Double, breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](1.0)(linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpSub.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpSub, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])))</description><symbolName>breeze.linalg.ImmutableNumericOps.-</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleNetwork</class><classType>Object</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleNetwork</fullClassName><method>getDerivative</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleNetwork.scala</path><id>789</id><start>2429</start><end>2429</end><line>62</line><description>linalg.this.DenseVector.canMapValues[Double, Double]((ClassTag.Double: scala.reflect.ClassTag[Double]))</description><symbolName>breeze.linalg.DenseVector.canMapValues</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>apply</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>870</id><start>412</start><end>412</end><line>11</line><description>linalg.this.DenseMatrix.canSliceCol[Double]</description><symbolName>breeze.linalg.DenseMatrix.canSliceCol</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>529</id><start>4163</start><end>4163</end><line>123</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>dotSum</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>879</id><start>575</start><end>575</end><line>15</line><description>linalg.this.Broadcaster.canBroadcastRows[breeze.linalg.DenseMatrix[Double], Nothing, breeze.linalg.DenseVector[Double]](linalg.this.DenseMatrix.handholdCanMapCols[Double])</description><symbolName>breeze.linalg.Broadcaster.canBroadcastRows</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>224</id><start>1465</start><end>1516</end><line>44</line><description>SimpleLaplacianModel.this.simpleNetwork.inputDerivative(SimpleLaplacianModel.xx).applyBatch(input)</description><symbolName>org.alexguldemond.pdenetwork.NetworkDerivative.applyBatch</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>batchCost</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>197</id><start>467</start><end>467</end><line>16</line><description>linalg.this.sum.reduce_Double[breeze.linalg.DenseVector[Double]](linalg.this.DenseVector.canIterateValues[Double])</description><symbolName>breeze.linalg.sum.reduce_Double</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>538</id><start>4191</start><end>4191</end><line>124</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</source><package>org.alexguldemond.pdenetwork</package><class>WeightGradientBatch</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.WeightGradientBatch</fullClassName><method>inPlaceProd</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/WeightGradientBatch.scala</path><id>951</id><start>1801</start><end>1813</end><line>44</line><description>x$4.:*=[breeze.linalg.DenseMatrix[Double], Double](scalar)(linalg.this.DenseMatrix.dm_s_UpdateOp_Double_OpMulScalar)</description><symbolName>breeze.linalg.NumericOps.:*=</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>296</id><start>1843</start><end>1843</end><line>55</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>233</id><start>1634</start><end>1635</end><line>47</line><description>1</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>637</id><start>4806</start><end>4806</end><line>135</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacian</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>206</id><start>805</start><end>813</end><line>25</line><description>input.apply(0)</description><symbolName>breeze.linalg.DenseVector.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>305</id><start>1868</start><end>1868</end><line>56</line><description>scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>costGradientBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>619</id><start>4707</start><end>4707</end><line>134</line><description>linalg.this.Tensor.liftTransposeOps[breeze.linalg.operators.OpMulMatrix.type, Int, Double, breeze.linalg.DenseVector[Double], breeze.linalg.DenseVector[Double], breeze.linalg.Transpose[breeze.linalg.DenseVector[Double]]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]], linalg.this.DenseVector.dv_s_Op_Double_OpMulMatrix, linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]]))</description><symbolName>breeze.linalg.Tensor.liftTransposeOps</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</source><package>org.alexguldemond.pdenetwork</package><class>SimpleLaplacianModel</class><classType>Class</classType><fullClassName>org.alexguldemond.pdenetwork.SimpleLaplacianModel</fullClassName><method>laplacianBatch</method><path>/Users/alexanderguldemond/IdeaProjects/pdenetwork/src/main/scala/org/alexguldemond/pdenetwork/SimpleLaplacianModel.scala</path><id>278</id><start>1776</start><end>1776</end><line>54</line><description>linalg.this.Tensor.transposeTensor[Int, Double, breeze.linalg.DenseVector[Double]](scala.Predef.$conforms[breeze.linalg.DenseVector[Double]])</description><symbolName>breeze.linalg.Tensor.transposeTensor</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
</statements>